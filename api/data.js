export default function handler(req, res) {
  const myData = {
	"Canvas Draw Line": {
		"prefix": "canvasline",
		"body": [
			"ctx.beginPath();",
			"ctx.moveTo(${1:50}, ${2:50});",
			"ctx.lineTo(${3:200}, ${4:200});",
			"ctx.stroke();",
			"ctx.closePath();"
		],
		"description": "Draw a line between two points"
	},
	"Canvas Draw Rectangle": {
		"prefix": "canvasrect",
		"body": [
			"ctx.beginPath();",
			"ctx.rect(${1:50}, ${2:50}, ${3:150}, ${4:100});",
			"ctx.stroke();",
			"ctx.closePath();"
		],
		"description": "Draw a rectangle using rect()"
	},
	"Canvas Draw Arc (Circle)": {
		"prefix": "canvasarc",
		"body": [
			"ctx.beginPath();",
			"ctx.arc(${1:100}, ${2:100}, ${3:50}, 0, Math.PI * 2);",
			"ctx.stroke();",
			"ctx.closePath();"
		],
		"description": "Draw a full circle with arc()"
	},
	"Canvas Use Path2D": {
		"prefix": "canvaspath2d",
		"body": [
			"const path = new Path2D();",
			"path.moveTo(${1:20}, ${2:20});",
			"path.lineTo(${3:100}, ${4:100});",
			"path.arc(${5:100}, ${6:100}, ${7:30}, 0, Math.PI);",
			"ctx.stroke(path);"
		],
		"description": "Use Path2D to draw complex shapes"
	},
	"Canvas Set Stroke and Fill Style": {
		"prefix": "tempCanvasstyle",
		"body": [
			"ctx.strokeStyle = \"${1:#0000ff}\";",
			"ctx.fillStyle = \"${2:#00ff00}\";",
			"ctx.lineWidth = ${3:2};",
			"ctx.stroke();",
			"ctx.fill();"
		],
		"description": "Set stroke and fill styles with line width"
	},
	"Canvas Set Line Styles (Cap and Join)": {
		"prefix": "tempCanvaslinestyle",
		"body": [
			"ctx.lineCap = \"${1:round}\"; // butt, round, square",
			"ctx.lineJoin = \"${2:miter}\"; // bevel, round, miter",
			"ctx.miterLimit = ${3:10};"
		],
		"description": "Set lineCap, lineJoin, and miterLimit"
	},
	"Canvas Linear Gradient": {
		"prefix": "tempCanvasgradientlinear",
		"body": [
			"const gradient = ctx.createLinearGradient(${1:0}, ${2:0}, ${3:200}, ${4:0});",
			"gradient.addColorStop(0, \"${5:red}\");",
			"gradient.addColorStop(1, \"${6:blue}\");",
			"ctx.fillStyle = gradient;",
			"ctx.fillRect(${7:20}, ${8:20}, ${9:150}, ${10:100});"
		],
		"description": "Create and apply a linear gradient"
	},
	"Canvas Radial Gradient": {
		"prefix": "tempCanvasgradientradial",
		"body": [
			"const gradient = ctx.createRadialGradient(${1:75}, ${2:50}, ${3:5}, ${4:90}, ${5:60}, ${6:100});",
			"gradient.addColorStop(0, \"${7:yellow}\");",
			"gradient.addColorStop(1, \"${8:orange}\");",
			"ctx.fillStyle = gradient;",
			"ctx.fillRect(${9:10}, ${10:10}, ${11:150}, ${12:100});"
		],
		"description": "Create and apply a radial gradient"
	},
	"Canvas Pattern from Image": {
		"prefix": "tempCanvaspattern",
		"body": [
			"const img = new Image();",
			"img.src = \"${1:path/to/image.png}\";",
			"img.onload = function() {",
			"  const pattern = ctx.createPattern(img, \"${2:repeat}\"); // repeat, repeat-x, repeat-y, no-repeat",
			"  ctx.fillStyle = pattern;",
			"  ctx.fillRect(${3:0}, ${4:0}, ${5:300}, ${6:300});",
			"};"
		],
		"description": "Fill canvas with image pattern"
	},
	"Canvas Fill Text": {
		"prefix": "tempCanvasfilltext",
		"body": [
			"ctx.font = \"${1:20px Arial}\";",
			"ctx.fillStyle = \"${2:black}\";",
			"ctx.textAlign = \"${3:center}\";",
			"ctx.textBaseline = \"${4:middle}\";",
			"ctx.fillText(\"${5:Hello Canvas}\", ${6:150}, ${7:75});"
		],
		"description": "Draw filled text with styling"
	},
	"Canvas Stroke Text": {
		"prefix": "tempCanvasstroketext",
		"body": [
			"ctx.font = \"${1:24px Verdana}\";",
			"ctx.strokeStyle = \"${2:blue}\";",
			"ctx.lineWidth = ${3:1};",
			"ctx.strokeText(\"${4:Outlined Text}\", ${5:100}, ${6:50});"
		],
		"description": "Draw outlined (stroked) text"
	},
	"Canvas Text Shadow": {
		"prefix": "tempCanvasshadow",
		"body": [
			"ctx.shadowColor = \"${1:rgba(0,0,0,0.5)}\";",
			"ctx.shadowBlur = ${2:10};",
			"ctx.shadowOffsetX = ${3:4};",
			"ctx.shadowOffsetY = ${4:4};",
			"ctx.fillStyle = \"${5:red}\";",
			"ctx.font = \"${6:30px Georgia}\";",
			"ctx.fillText(\"${7:Shadow Text}\", ${8:60}, ${9:90});"
		],
		"description": "Apply shadow to text or shapes"
	},
	"Canvas Draw Image": {
		"prefix": "tempCanvasdrawimage",
		"body": [
			"const img = new Image();",
			"img.src = \"${1:img.jpg}\";",
			"img.onload = function() {",
			"  ctx.drawImage(img, ${2:10}, ${3:10}, ${4:100}, ${5:100});",
			"};"
		],
		"description": "Draw image to canvas when loaded"
	},
	"Canvas Translate": {
		"prefix": "tempCanvastranslate",
		"body": [
			"ctx.translate(${1:50}, ${2:50});"
		],
		"description": "Move origin to new coordinates"
	},
	"Canvas Rotate": {
		"prefix": "tempCanvasrotate",
		"body": [
			"ctx.rotate(${1:Math.PI / 4}); // rotate 45 degrees"
		],
		"description": "Rotate canvas context"
	},
	"Canvas Scale": {
		"prefix": "tempCanvasscale",
		"body": [
			"ctx.scale(${1:2}, ${2:2});"
		],
		"description": "Scale canvas context"
	},
	"Canvas Transform": {
		"prefix": "tempCanvastransform",
		"body": [
			"ctx.transform(${1:1}, ${2:0}, ${3:0}, ${4:1}, ${5:30}, ${6:30});"
		],
		"description": "Apply custom transformation matrix"
	},
	"Canvas Set Transform": {
		"prefix": "tempCanvassettransform",
		"body": [
			"ctx.setTransform(${1:1}, ${2:0}, ${3:0}, ${4:1}, ${5:0}, ${6:0});"
		],
		"description": "Reset and set new transformation matrix"
	},
	"Canvas Reset Transform": {
		"prefix": "tempCanvasresettransform",
		"body": [
			"ctx.resetTransform();"
		],
		"description": "Reset all transformations"
	},
	"Canvas Clipping with fillRule": {
		"prefix": "tempCanvasclip",
		"body": [
			"ctx.beginPath();",
			"ctx.arc(${1:100}, ${2:75}, ${3:50}, 0, Math.PI * 2);",
			"ctx.clip(\"${4:nonzero}\"); // 'nonzero' or 'evenodd'",
			"ctx.fillStyle = \"${5:lightblue}\";",
			"ctx.fillRect(${6:0}, ${7:0}, ${8:200}, ${9:150});"
		],
		"description": "Clip canvas drawing area using path with fillRule"
	},
	"Canvas Clipping with Custom Path": {
		"prefix": "tempCanvasclippath",
		"body": [
			"ctx.beginPath();",
			"ctx.moveTo(${1:50}, ${2:20});",
			"ctx.lineTo(${3:150}, ${4:20});",
			"ctx.lineTo(${5:100}, ${6:120});",
			"ctx.closePath();",
			"ctx.clip();"
		],
		"description": "Clip using a custom triangle path"
	},
	"Canvas Global Composite Operation": {
		"prefix": "tempCanvascomposite",
		"body": [
			"ctx.globalCompositeOperation = \"${1:source-over}\";",
			"// options: source-over, destination-over, source-in, source-out, source-atop,",
			"// destination-in, destination-out, destination-atop, lighter, copy, xor, multiply, screen, overlay"
		],
		"description": "Set globalCompositeOperation mode"
	},
	"Canvas Save and Restore": {
		"prefix": "tempCanvassaverestore",
		"body": [
			"ctx.save();",
			"// Perform drawing or transformations",
			"ctx.translate(${1:50}, ${2:50});",
			"ctx.rotate(${3:Math.PI / 6});",
			"ctx.fillStyle = \"${4:red}\";",
			"ctx.fillRect(${5:0}, ${6:0}, ${7:100}, ${8:100});",
			"ctx.restore();"
		],
		"description": "Save and restore canvas state"
	},
	"Canvas Save": {
		"prefix": "tempCanvassave",
		"body": [
			"ctx.save();"
		],
		"description": "Save canvas state"
	},
	"Canvas Restore": {
		"prefix": "tempCanvasrestore",
		"body": [
			"ctx.restore();"
		],
		"description": "Restore canvas state"
	},
	"Canvas Path2D Basic Shape": {
		"prefix": "tempCanvaspath2d",
		"body": [
			"const path = new Path2D();",
			"path.moveTo(${1:20}, ${2:20});",
			"path.lineTo(${3:120}, ${4:20});",
			"path.lineTo(${5:70}, ${6:100});",
			"path.closePath();",
			"ctx.strokeStyle = \"${7:green}\";",
			"ctx.stroke(path);"
		],
		"description": "Draw a custom Path2D shape"
	},
	"Canvas Path2D from SVG": {
		"prefix": "tempCanvaspath2dsvg",
		"body": [
			"const path = new Path2D(\"${1:M10 10 h 80 v 80 h -80 Z}\");",
			"ctx.fillStyle = \"${2:#444}\";",
			"ctx.fill(path);"
		],
		"description": "Create Path2D from SVG path string"
	},
	"Canvas Game Loop with requestAnimationFrame": {
		"prefix": "tempCanvasgameloop",
		"body": [
			"function gameLoop(timestamp) {",
			"  ctx.clearRect(0, 0, canvas.width, canvas.height);",
			"  // Update game state",
			"  // Draw game objects",
			"  requestAnimationFrame(gameLoop);",
			"}",
			"requestAnimationFrame(gameLoop);"
		],
		"description": "Basic game loop using requestAnimationFrame"
	},
	"Canvas SetInterval Animation": {
		"prefix": "tempCanvassetinterval",
		"body": [
			"setInterval(() => {",
			"  ctx.clearRect(0, 0, canvas.width, canvas.height);",
			"  // update and draw",
			"}, ${1:16});"
		],
		"description": "Animation using setInterval (~60fps)"
	},
	"Canvas Keyboard Controller": {
		"prefix": "tempCanvaskeyboard",
		"body": [
			"window.addEventListener('keydown', (e) => {",
			"  if(e.key === \"${1:ArrowUp}\") {",
			"    // move up",
			"  } else if(e.key === \"${2:ArrowDown}\") {",
			"    // move down",
			"  }",
			"});"
		],
		"description": "Basic keyboard input handling"
	},
	"Canvas Mouse Controller": {
		"prefix": "tempCanvasmouse",
		"body": [
			"canvas.addEventListener('mousemove', (e) => {",
			"  const rect = canvas.getBoundingClientRect();",
			"  const mouseX = e.clientX - rect.left;",
			"  const mouseY = e.clientY - rect.top;",
			"  // handle mouse position",
			"});"
		],
		"description": "Track mouse movement on canvas"
	},
	"Canvas Touch Controller": {
		"prefix": "tempCanvastouch",
		"body": [
			"canvas.addEventListener('touchstart', (e) => {",
			"  e.preventDefault();",
			"  const touch = e.touches[0];",
			"  const rect = canvas.getBoundingClientRect();",
			"  const touchX = touch.clientX - rect.left;",
			"  const touchY = touch.clientY - rect.top;",
			"  // handle touch",
			"});"
		],
		"description": "Basic touch input handling"
	},
	"Canvas Animation with requestAnimationFrame": {
		"prefix": "tempCanvasanimation",
		"body": [
			"function animate(time) {",
			"  ctx.clearRect(0, 0, canvas.width, canvas.height);",
			"  // update animation state",
			"  // draw animation frame",
			"  requestAnimationFrame(animate);",
			"}",
			"requestAnimationFrame(animate);"
		],
		"description": "Animate using requestAnimationFrame"
	},
	"Canvas Animation with setTimeout": {
		"prefix": "tempCanvasanimationtimeout",
		"body": [
			"function animate() {",
			"  ctx.clearRect(0, 0, canvas.width, canvas.height);",
			"  // update and draw",
			"  setTimeout(animate, ${1:16});",
			"}",
			"animate();"
		],
		"description": "Animate using setTimeout loop"
	},
	"SVG Circle": {
		"prefix": "tempSVGcircle",
		"body": [
			"<circle cx=\"${1:50}\" cy=\"${2:50}\" r=\"${3:40}\"",
			"  fill=\"${4:blue}\" stroke=\"${5:black}\" stroke-width=\"${6:2}\" />"
		],
		"description": "SVG Circle element with basic attributes"
	},
	"SVG Rectangle": {
		"prefix": "tempSVGrect",
		"body": [
			"<rect x=\"${1:10}\" y=\"${2:10}\" width=\"${3:100}\" height=\"${4:50}\"",
			"  fill=\"${5:red}\" stroke=\"${6:black}\" stroke-width=\"${7:2}\" rx=\"${8:5}\" ry=\"${9:5}\" />"
		],
		"description": "SVG Rectangle with rounded corners and attributes"
	},
	"SVG Ellipse": {
		"prefix": "tempSVGellipse",
		"body": [
			"<ellipse cx=\"${1:50}\" cy=\"${2:50}\" rx=\"${3:30}\" ry=\"${4:20}\"",
			"  fill=\"${5:green}\" stroke=\"${6:black}\" stroke-width=\"${7:2}\" />"
		],
		"description": "SVG Ellipse element with basic attributes"
	},
	"SVG Line": {
		"prefix": "tempSVGline",
		"body": [
			"<line x1=\"${1:0}\" y1=\"${2:0}\" x2=\"${3:100}\" y2=\"${4:100}\"",
			"  stroke=\"${5:black}\" stroke-width=\"${6:2}\" />"
		],
		"description": "SVG Line element with stroke attributes"
	},
	"SVG Polygon": {
		"prefix": "tempSVGpolygon",
		"body": [
			"<polygon points=\"${1:50,10 90,90 10,90}\"",
			"  fill=\"${2:orange}\" stroke=\"${3:black}\" stroke-width=\"${4:2}\" />"
		],
		"description": "SVG Polygon with points and stroke"
	},
	"SVG Polyline": {
		"prefix": "tempSVGpolyline",
		"body": [
			"<polyline points=\"${1:0,40 40,40 40,80 80,80 80,120}\"",
			"  fill=\"none\" stroke=\"${2:black}\" stroke-width=\"${3:2}\" />"
		],
		"description": "SVG Polyline with stroke and no fill"
	},
	"SVG Path - MoveTo (M)": {
		"prefix": "tempSVGpathM",
		"body": [
			"<path d=\"M ${1:10} ${2:10}\" stroke=\"${3:black}\" fill=\"${4:none}\" stroke-width=\"${5:2}\" />"
		],
		"description": "SVG Path MoveTo command"
	},
	"SVG Path - LineTo (L)": {
		"prefix": "tempSVGpathL",
		"body": [
			"<path d=\"M ${1:10} ${2:10} L ${3:50} ${4:50}\" stroke=\"${5:black}\" fill=\"${6:none}\" stroke-width=\"${7:2}\" />"
		],
		"description": "SVG Path LineTo command"
	},
	"SVG Path - Horizontal LineTo (H)": {
		"prefix": "tempSVGpathH",
		"body": [
			"<path d=\"M ${1:10} ${2:10} H ${3:100}\" stroke=\"${4:black}\" fill=\"${5:none}\" stroke-width=\"${6:2}\" />"
		],
		"description": "SVG Path Horizontal LineTo command"
	},
	"SVG Path - Vertical LineTo (V)": {
		"prefix": "tempSVGpathV",
		"body": [
			"<path d=\"M ${1:10} ${2:10} V ${3:100}\" stroke=\"${4:black}\" fill=\"${5:none}\" stroke-width=\"${6:2}\" />"
		],
		"description": "SVG Path Vertical LineTo command"
	},
	"SVG Path - Cubic Bezier Curve (C)": {
		"prefix": "tempSVGpathC",
		"body": [
			"<path d=\"M ${1:10} ${2:80} C ${3:40} ${4:10}, ${5:65} ${6:10}, ${7:95} ${8:80}\"",
			"  stroke=\"${9:black}\" fill=\"${10:none}\" stroke-width=\"${11:2}\" />"
		],
		"description": "SVG Path Cubic Bezier Curve command"
	},
	"SVG Path - Smooth Cubic Bezier Curve (S)": {
		"prefix": "tempSVGpathS",
		"body": [
			"<path d=\"M ${1:10} ${2:80} C ${3:40} ${4:10}, ${5:65} ${6:10}, ${7:95} ${8:80} S ${9:150} ${10:150}, ${11:180} ${12:80}\"",
			"  stroke=\"${13:black}\" fill=\"${14:none}\" stroke-width=\"${15:2}\" />"
		],
		"description": "SVG Path Smooth Cubic Bezier Curve command"
	},
	"SVG Path - Quadratic Bezier Curve (Q)": {
		"prefix": "tempSVGpathQ",
		"body": [
			"<path d=\"M ${1:10} ${2:80} Q ${3:95} ${4:10}, ${5:180} ${6:80}\"",
			"  stroke=\"${7:black}\" fill=\"${8:none}\" stroke-width=\"${9:2}\" />"
		],
		"description": "SVG Path Quadratic Bezier Curve command"
	},
	"SVG Path - Smooth Quadratic Bezier Curve (T)": {
		"prefix": "tempSVGpathT",
		"body": [
			"<path d=\"M ${1:10} ${2:80} Q ${3:95} ${4:10}, ${5:180} ${6:80} T ${7:280} ${8:80}\"",
			"  stroke=\"${9:black}\" fill=\"${10:none}\" stroke-width=\"${11:2}\" />"
		],
		"description": "SVG Path Smooth Quadratic Bezier Curve command"
	},
	"SVG Path - Arc (A)": {
		"prefix": "tempSVGpathA",
		"body": [
			"<path d=\"M ${1:50} ${2:50} A ${3:30} ${4:30} ${5:0} ${6:1} ${7:0} ${8:100} ${9:100}\"",
			"  stroke=\"${10:black}\" fill=\"${11:none}\" stroke-width=\"${12:2}\" />"
		],
		"description": "SVG Path Arc command"
	},
	"SVG Path - Close Path (Z)": {
		"prefix": "tempSVGpathZ",
		"body": [
			"<path d=\"M ${1:10} ${2:10} L ${3:100} ${4:10} L ${5:100} ${6:100} Z\"",
			"  stroke=\"${7:black}\" fill=\"${8:none}\" stroke-width=\"${9:2}\" />"
		],
		"description": "SVG Path Close Path command"
	},
	"SVG Text (position & length attributes)": {
		"prefix": "tempSVGtext",
		"body": [
			"<text",
			"  x=\"${1:10}\" y=\"${2:50}\"",
			"  dx=\"${3:0}\" dy=\"${4:0}\"",
			"  rotate=\"${5:0}\"",
			"  textLength=\"${6}\"",
			"  lengthAdjust=\"${7:spacing|spacingAndGlyphs}\"",
			">",
			"  ${8:Sample Text}",
			"</text>"
		],
		"description": "SVG Text element with x, y, dx, dy, rotate, textLength, lengthAdjust"
	},
	"SVG TSpan (position & length attributes)": {
		"prefix": "tempSVGtspan",
		"body": [
			"<text",
			"  x=\"${1:10}\" y=\"${2:50}\"",
			"  dx=\"${3:0}\" dy=\"${4:0}\"",
			"  rotate=\"${5:0}\"",
			"  textLength=\"${6}\"",
			"  lengthAdjust=\"${7:spacing|spacingAndGlyphs}\"",
			">",
			"  ${8:Sample Text}",
			"  <tspan",
			"    x=\"${9}\" y=\"${10}\"",
			"    dx=\"${11:0}\" dy=\"${12:0}\"",
			"    rotate=\"${13:0}\"",
			"    textLength=\"${14}\"",
			"    lengthAdjust=\"${15:spacing|spacingAndGlyphs}\"",
			"  >",
			"    ${16:Span Text}",
			"  </tspan>",
			"</text>"
		],
		"description": "SVG TSpan element with x, y, dx, dy, rotate, textLength, lengthAdjust"
	},
	"SVG TextPath (href & length attributes)": {
		"prefix": "tempSVGtextPath",
		"body": [
			"<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${1:400}\" height=\"${2:200}\">",
			"  <defs>",
			"    <path id=\"${3:pathId}\" d=\"${4:M10 80 C 40 10, 65 10, 95 80 S 150 150, 180 80}\" />",
			"  </defs>",
			"  <text",
			"    x=\"${5:10}\" y=\"${6:50}\"",
			"    dx=\"${7:0}\" dy=\"${8:0}\"",
			"    rotate=\"${9:0}\"",
			"    textLength=\"${10}\"",
			"    lengthAdjust=\"${11:spacing|spacingAndGlyphs}\"",
			"  >",
			"    <textPath",
			"      href=\"#${3:pathId}\"",
			"      startOffset=\"${12:0}\"",
			"      method=\"${13:align|stretch}\"",
			"      spacing=\"${14:auto|exact}\"",
			"      lengthAdjust=\"${15:spacing|spacingAndGlyphs}\"",
			"      textLength=\"${16}\"",
			"    >",
			"      ${17:Text on path}",
			"    </textPath>",
			"  </text>",
			"</svg>"
		],
		"description": "SVG TextPath element with href, startOffset, method, spacing, lengthAdjust, textLength"
	},
	"SVG Stroke and Fill Attributes": {
		"prefix": "tempSVGstrokeFill",
		"body": [
			"stroke=\"${1:#000}\"",
			"stroke-width=\"${2:1}\"",
			"stroke-opacity=\"${3:1}\"",
			"stroke-dasharray=\"${4}\"",
			"stroke-dashoffset=\"${5:0}\"",
			"stroke-linecap=\"${6:butt|round|square}\"",
			"stroke-linejoin=\"${7:miter|round|bevel}\"",
			"stroke-miterlimit=\"${8:4}\"",
			"fill=\"${9:none}\"",
			"fill-opacity=\"${10:1}\"",
			"fill-rule=\"${11:nonzero|evenodd}\"",
			"color=\"${12}\"",
			"opacity=\"${13:1}\""
		],
		"description": "Common stroke and fill attributes for SVG elements"
	},
	"SVG Filter Definition": {
		"prefix": "tempSVGfilter",
		"body": [
			"<defs>",
			"  <filter id=\"${1:filterId}\" x=\"${2:-50%}\" y=\"${3:-50%}\" width=\"${4:200%}\" height=\"${5:200%}\" filterUnits=\"${6:userSpaceOnUse|objectBoundingBox}\" primitiveUnits=\"${7:userSpaceOnUse|userSpaceOnUse}\">",
			"    <feGaussianBlur in=\"${8:SourceGraphic}\" stdDeviation=\"${9:5}\" />",
			"    <feOffset dx=\"${10:5}\" dy=\"${11:5}\" />",
			"    <feMerge>",
			"      <feMergeNode />",
			"      <feMergeNode in=\"SourceGraphic\" />",
			"    </feMerge>",
			"  </filter>",
			"</defs>",
			" <rect width=\"90\" height=\"90\" fill=\"yellow\" filter=\"url(#${1:filterId})\" />"
		],
		"description": "SVG filter element with Gaussian blur, offset and merge example"
	},
	"SVG Linear Gradient": {
		"prefix": "tempSVGlinearGradient",
		"body": [
			"<defs>",
			"  <linearGradient id=\"${1:gradId}\" x1=\"${2:0%}\" y1=\"${3:0%}\" x2=\"${4:100%}\" y2=\"${5:0%}\" gradientUnits=\"${6:userSpaceOnUse|objectBoundingBox}\" spreadMethod=\"${7:pad|reflect|repeat}\">",
			"    <stop offset=\"${8:0%}\" stop-color=\"${9:#000}\" stop-opacity=\"${10:1}\" />",
			"    <stop offset=\"${11:100%}\" stop-color=\"${12:#fff}\" stop-opacity=\"${13:1}\" />",
			"  </linearGradient>",
			"</defs>",
			"<rect x=\"${14:0}\" y=\"${15:0}\" width=\"${16:100}\" height=\"${17:100}\" fill=\"url(#${1:gradId})\" />"
		],
		"description": "SVG linearGradient with stops and example usage on a rect"
	},
	"SVG Radial Gradient": {
		"prefix": "tempSVGradialGradient",
		"body": [
			"<defs>",
			"  <radialGradient id=\"${1:gradId}\" cx=\"${2:50%}\" cy=\"${3:50%}\" r=\"${4:50%}\" fx=\"${5:50%}\" fy=\"${6:50%}\" gradientUnits=\"${7:userSpaceOnUse|objectBoundingBox}\" spreadMethod=\"${8:pad|reflect|repeat}\">",
			"    <stop offset=\"${9:0%}\" stop-color=\"${10:#000}\" stop-opacity=\"${11:1}\" />",
			"    <stop offset=\"${12:100%}\" stop-color=\"${13:#fff}\" stop-opacity=\"${14:1}\" />",
			"  </radialGradient>",
			"</defs>",
			"<circle cx=\"${15:50}\" cy=\"${16:50}\" r=\"${17:40}\" fill=\"url(#${1:gradId})\" />"
		],
		"description": "SVG radialGradient with stops and example usage on a circle"
	},
	"SVG Link with xlink:href": {
		"prefix": "tempSVGlink",
		"body": [
			"<a xlink:href=\"${1:#}\" target=\"${2:_blank}\">",
			"  ${3:<!-- SVG content here -->}",
			"</a>"
		],
		"description": "SVG <a> element with xlink:href and target"
	},
	"SVG Image": {
		"prefix": "tempSVGimage",
		"body": [
			"<image",
			"  x=\"${1:0}\" y=\"${2:0}\" width=\"${3:100}\" height=\"${4:100}\"",
			"  xlink:href=\"${5:url_or_path}\"",
			"  preserveAspectRatio=\"${6:xMidYMid meet|xMinYMin slice}\"",
			"  opacity=\"${7:1}\"",
			"  transform=\"${8}\"",
			"/>"
		],
		"description": "SVG image element with xlink:href and positioning"
	},
	"SVG Pattern": {
		"prefix": "tempSVGpattern",
		"body": [
			"<defs>",
			"  <pattern id=\"${1:patternId}\" patternUnits=\"${2:userSpaceOnUse|objectBoundingBox}\" width=\"${3:10}\" height=\"${4:10}\" patternTransform=\"${5:rotate(0)}\">",
			"    ${6:<!-- pattern content, e.g. rect, circle -->}",
			"  </pattern>",
			"</defs>",
			"<rect x=\"${7:0}\" y=\"${8:0}\" width=\"${9:100}\" height=\"${10:100}\" fill=\"url(#${1:patternId})\" />"
		],
		"description": "SVG pattern definition with usage example on a rect"
	},
	"SVG Transformations": {
		"prefix": "tempSVGtransform",
		"body": [
			"transform=\"${1|translate(10,20),scale(1.5),rotate(45,50,50),skewX(20),skewY(10)|}\""
		],
		"description": "Common SVG transform functions: translate, scale, rotate, skewX, skewY"
	},
	"SVG Clipping Path": {
		"prefix": "tempSVGclipping",
		"body": [
			"<defs>",
			"  <clipPath id=\"${1:clipId}\">",
			"    ${2:<rect x=\"0\" y=\"0\" width=\"100\" height=\"100\" />} ",
			"  </clipPath>",
			"</defs>",
			"<rect x=\"${3:0}\" y=\"${4:0}\" width=\"${5:200}\" height=\"${6:200}\" clip-path=\"url(#${1:clipId})\" fill=\"${7:#ccc}\" />"
		],
		"description": "SVG clipPath definition and usage"
	},
	"SVG Mask": {
		"prefix": "tempSVGmask",
		"body": [
			"<defs>",
			"  <mask id=\"${1:maskId}\" maskUnits=\"${2:userSpaceOnUse|objectBoundingBox}\">",
			"    ${3:<rect x=\"0\" y=\"0\" width=\"100\" height=\"100\" fill=\"white\" />} ",
			"  </mask>",
			"</defs>",
			"<rect x=\"${4:0}\" y=\"${5:0}\" width=\"${6:200}\" height=\"${7:200}\" mask=\"url(#${1:maskId})\" fill=\"${8:#ccc}\" />"
		],
		"description": "SVG mask definition and usage"
	},
	"SVG animate": {
		"prefix": "tempSVGanimate",
		"body": [
			"<animate",
			"  attributeName=\"${1:attributeName}\"",
			"  from=\"${2}\" to=\"${3}\"",
			"  dur=\"${4:1s}\"",
			"  begin=\"${5:0s}\"",
			"  repeatCount=\"${6:indefinite|1}\"",
			"  fill=\"${7:remove|freeze}\"",
			"/>"
		],
		"description": "SVG animate element for simple attribute animation"
	},
	"SVG animateTransform": {
		"prefix": "tempSVGanimateTransform",
		"body": [
			"<animateTransform",
			"  attributeName=\"transform\"",
			"  type=\"${1:translate|scale|rotate|skewX|skewY}\"",
			"  from=\"${2}\" to=\"${3}\"",
			"  dur=\"${4:1s}\"",
			"  begin=\"${5:0s}\"",
			"  repeatCount=\"${6:indefinite|1}\"",
			"  additive=\"${7:replace|sum}\"",
			"  fill=\"${8:remove|freeze}\"",
			"/>"
		],
		"description": "SVG animateTransform element for transforming animation"
	},
	"SVG animateMotion": {
		"prefix": "tempSVGanimateMotion",
		"body": [
			"<animateMotion",
			"  path=\"${1:M0,0 L100,0}\"",
			"  dur=\"${2:5s}\"",
			"  begin=\"${3:0s}\"",
			"  repeatCount=\"${4:indefinite|1}\"",
			"  fill=\"${5:remove|freeze}\"",
			"/>"
		],
		"description": "SVG animateMotion element for motion along a path"
	},
	"jQuery CDN": {
		"prefix": "tempjQueryCDN",
		"body": [
			"<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>"
		],
		"description": "Include jQuery CDN from code.jquery.com"
	},
	"jQuery Document Ready": {
		"prefix": "tempjQueryReady",
		"body": [
			"$(document).ready(function() {",
			"  $0",
			"});"
		],
		"description": "jQuery DOM ready event"
	},
	"jQuery Selectors": {
		"prefix": "tempjQuerySelector",
		"body": [
			"$('#${1:id}'); // ID selector",
			"$('.${2:class}'); // Class selector",
			"$('${3:tag}'); // Tag selector",
			"$('*'); // Universal selector",
			"$('${4:element}[${5:attribute}=\"${6:value}\"]'); // Attribute selector"
		],
		"description": "Various jQuery selectors: id, class, tag, *, attribute"
	},
	"jQuery Events (Mouse/Focus)": {
		"prefix": "tempjQueryEvents",
		"body": [
			"$('#${1:element}').click(function() {",
			"  ${2:console.log('Clicked');}",
			"});",
			"$('#${3:element}').dblclick(function() {",
			"  ${4:console.log('Double Clicked');}",
			"});",
			"$('#${5:element}').mouseenter(function() {",
			"  ${6:$(this).css('background-color', 'lightblue');}",
			"});",
			"$('#${7:element}').mouseleave(function() {",
			"  ${8:$(this).css('background-color', 'white');}",
			"});",
			"$('#${9:element}').mousedown(function() {",
			"  ${10:console.log('Mouse Down');}",
			"});",
			"$('#${11:element}').mouseup(function() {",
			"  ${12:console.log('Mouse Up');}",
			"});",
			"$('#${13:input}').focus(function() {",
			"  ${14:$(this).css('background-color', 'yellow');}",
			"});",
			"$('#${15:input}').blur(function() {",
			"  ${16:$(this).css('background-color', '');}",
			"});"
		],
		"description": "All common mouse and input focus events"
	},
	"jQuery Hover and On": {
		"prefix": "tempjQueryHoverOn",
		"body": [
			"// Hover (mouseenter + mouseleave)",
			"$('#${1:hoverElement}').hover(",
			"  function() { ${2:$(this).addClass('hovered');} },",
			"  function() { ${3:$(this).removeClass('hovered');} }",
			");",
			"",
			"// .on() for any event",
			"$('#${4:onElement}').on('${5:event}', function() {",
			"  ${6:console.log('Event triggered');}",
			"});"
		],
		"description": "Hover and general event binding with .on()"
	},
	"jQuery Show Hide Toggle": {
		"prefix": "tempjQueryShowHideToggle",
		"body": [
			"$('#${1:element}').show(${2:400});",
			"$('#${3:element}').hide(${4:400});",
			"$('#${5:element}').toggle(${6:400});"
		],
		"description": "jQuery .show(), .hide(), .toggle() with optional speed"
	},
	"jQuery Get and Set Content": {
		"prefix": "tempjQueryGetSetContent",
		"body": [
			"// Get text/html/val",
			"var text = $('#${1:element}').text();",
			"var html = $('#${2:element}').html();",
			"var value = $('#${3:input}').val();",
			"",
			"// Set text/html/val",
			"$('#${4:element}').text('${5:New Text}');",
			"$('#${6:element}').html('<b>${7:Bold HTML}</b>');",
			"$('#${8:input}').val('${9:New Value}');"
		],
		"description": "Get and set .text(), .html(), .val() for elements"
	},
	"jQuery Class Manipulation": {
		"prefix": "tempjQueryClass",
		"body": [
			"$('#${1:element}').addClass('${2:className}');",
			"$('#${3:element}').removeClass('${4:className}');",
			"$('#${5:element}').toggleClass('${6:className}');"
		],
		"description": "Add, remove, or toggle class on element"
	},
	"jQuery Fade Effects": {
		"prefix": "tempjQueryFade",
		"body": [
			"$('#${1:element}').fadeIn(${2:400});",
			"$('#${3:element}').fadeOut(${4:400});",
			"$('#${5:element}').fadeToggle(${6:400});",
			"$('#${7:element}').fadeTo(${8:400}, ${9:0.5});"
		],
		"description": "fadeIn, fadeOut, fadeToggle, fadeTo with optional speed and opacity"
	},
	"jQuery Slide Effects": {
		"prefix": "tempjQuerySlide",
		"body": [
			"$('#${1:element}').slideDown(${2:400});",
			"$('#${3:element}').slideUp(${4:400});",
			"$('#${5:element}').slideToggle(${6:400});"
		],
		"description": "slideDown, slideUp, slideToggle with speed"
	},
	"tempDataTextToTable": {
		"prefix": "tempDataTextToTable",
		"body": [
			"<table id=\"fileData\" border=\"1\"></table>",
			"<script>",
			"$(document).ready(function () {",
			"  $.get('${1:sample.txt}', function (theData) {",
			"    let data = theData.split('\\n');",
			"    let theTable = '';",
			"    for (let i = 0; i < data.length; i++) {",
			"      let row = '<tr>';",
			"      let cols = data[i].trim().split(' ');",
			"      for (let j = 0; j < cols.length; j++) {",
			"        row += '<td>' + cols[j] + '</td>';",
			"      }",
			"      row += '</tr>';",
			"      theTable += row;",
			"    }",
			"    $('#fileData').html(theTable);",
			"  });",
			"});",
			"</script>"
		],
		"description": "Reads a text file using jQuery and displays the content as an HTML table"
	},
	"tempDataTextToPie": {
		"prefix": "tempDataTextToPie",
		"body": [
			"<canvas id=\"myPieChart\" width=\"400\" height=\"400\"></canvas>",
			"<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>",
			"<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>",
			"<script>",
			"  $(document).ready(function () {",
			"    $.get('${1:data.txt}', function (theData) {",
			"      const lines = theData.trim().split('\\n');",
			"      const labels = [];",
			"      const data = [];",
			"      lines.forEach(line => {",
			"        const parts = line.trim().split(' ');",
			"        if(parts.length >= 2) {",
			"          labels.push(parts[0]);",
			"          data.push(parseFloat(parts[1]));",
			"        }",
			"      });",
			"      const ctx = document.getElementById('myPieChart').getContext('2d');",
			"      new Chart(ctx, {",
			"        type: 'pie',",
			"        data: {",
			"          labels: labels,",
			"          datasets: [{",
			"            data: data,",
			"            backgroundColor: [",
			"              '#FF6384','#36A2EB','#FFCE56','#4BC0C0','#9966FF','#FF9F40'",
			"            ]",
			"          }]",
			"        },",
			"        options: { responsive: true }",
			"      });",
			"    });",
			"  });",
			"</script>"
		],
		"description": "Read text file and generate a pie chart using Chart.js"
	},
	"tempDataTextToBar": {
		"prefix": "tempDataTextToBar",
		"body": [
			"<canvas id=\"myBarChart\" width=\"400\" height=\"400\"></canvas>",
			"<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>",
			"<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>",
			"<script>",
			"  $(document).ready(function () {",
			"    $.get('${1:data.txt}', function (theData) {",
			"      const lines = theData.trim().split('\\n');",
			"      const labels = [];",
			"      const data = [];",
			"      lines.forEach(line => {",
			"        const parts = line.trim().split(' ');",
			"        if(parts.length >= 2) {",
			"          labels.push(parts[0]);",
			"          data.push(parseFloat(parts[1]));",
			"        }",
			"      });",
			"      const ctx = document.getElementById('myBarChart').getContext('2d');",
			"      new Chart(ctx, {",
			"        type: 'bar',",
			"        data: {",
			"          labels: labels,",
			"          datasets: [{",
			"            label: '${2:Dataset}',",
			"            data: data,",
			"            backgroundColor: '#36A2EB'",
			"          }]",
			"        },",
			"        options: { responsive: true }",
			"      });",
			"    });",
			"  });",
			"</script>"
		],
		"description": "Read text file and generate a bar chart using Chart.js"
	},
	"tempDataCsvToTable": {
		"prefix": "tempDataCsvToTable",
		"body": [
			"<div id=\"tableContainer\"></div>",
			"<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>",
			"<script>",
			"  $(document).ready(function () {",
			"    $.get('${1:data.csv}', function(csvData) {",
			"      const lines = csvData.trim().split('\\n');",
			"      let html = '<table border=\"1\"><thead><tr>';",
			"      const headers = lines[0].split(',');",
			"      headers.forEach(h => html += `<th>${h.trim()}</th>`);",
			"      html += '</tr></thead><tbody>';",
			"      for(let i=1; i<lines.length; i++) {",
			"        const cells = lines[i].split(',');",
			"        html += '<tr>';",
			"        cells.forEach(c => html += `<td>${c.trim()}</td>`);",
			"        html += '</tr>';",
			"      }",
			"      html += '</tbody></table>';",
			"      $('#tableContainer').html(html);",
			"    });",
			"  });",
			"</script>"
		],
		"description": "Load CSV and display as HTML table"
	},
	"tempDataCsvToPie": {
		"prefix": "tempDataCsvToPie",
		"body": [
			"<canvas id=\"myPieChart\" width=\"400\" height=\"400\"></canvas>",
			"<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>",
			"<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>",
			"<script>",
			"  $(document).ready(function () {",
			"    $.get('${1:data.csv}', function(csvData) {",
			"      const lines = csvData.trim().split('\\n');",
			"      const labels = [];",
			"      const data = [];",
			"      for(let i=1; i<lines.length; i++) {",
			"        const parts = lines[i].split(',');",
			"        if(parts.length >= 2) {",
			"          labels.push(parts[0].trim());",
			"          data.push(parseFloat(parts[1]));",
			"        }",
			"      }",
			"      const ctx = document.getElementById('myPieChart').getContext('2d');",
			"      new Chart(ctx, {",
			"        type: 'pie',",
			"        data: {",
			"          labels: labels,",
			"          datasets: [{",
			"            data: data,",
			"            backgroundColor: [",
			"              '#FF6384','#36A2EB','#FFCE56','#4BC0C0','#9966FF','#FF9F40'",
			"            ]",
			"          }]",
			"        },",
			"        options: { responsive: true }",
			"      });",
			"    });",
			"  });",
			"</script>"
		],
		"description": "Read CSV and generate pie chart using Chart.js"
	},
	"tempDataCsvToBar": {
		"prefix": "tempDataCsvToBar",
		"body": [
			"<canvas id=\"myBarChart\" width=\"400\" height=\"400\"></canvas>",
			"<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>",
			"<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>",
			"<script>",
			"  $(document).ready(function () {",
			"    $.get('${1:data.csv}', function(csvData) {",
			"      const lines = csvData.trim().split('\\n');",
			"      const labels = [];",
			"      const data = [];",
			"      for(let i=1; i<lines.length; i++) {",
			"        const parts = lines[i].split(',');",
			"        if(parts.length >= 2) {",
			"          labels.push(parts[0].trim());",
			"          data.push(parseFloat(parts[1]));",
			"        }",
			"      }",
			"      const ctx = document.getElementById('myBarChart').getContext('2d');",
			"      new Chart(ctx, {",
			"        type: 'bar',",
			"        data: {",
			"          labels: labels,",
			"          datasets: [{",
			"            label: '${2:Dataset}',",
			"            data: data,",
			"            backgroundColor: '#36A2EB'",
			"          }]",
			"        },",
			"        options: { responsive: true }",
			"      });",
			"    });",
			"  });",
			"</script>"
		],
		"description": "Read CSV and generate bar chart using Chart.js"
	},
	"tempDataXmlToDynamicTable": {
		"prefix": "tempDataXmlToDynamicTable",
		"body": [
			"<table id=\"dataTable\" border=\"2\"></table>",
			"<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>",
			"<script>",
			"  $(document).ready(function() {",
			"    $.get({",
			"      url: '${1:data.xml}',",
			"      dataType: 'xml',",
			"      success: function(xml) {",
			"        const rootChildren = $(xml).children().first().children();",
			"        if(!rootChildren.length) {",
			"          $('#dataTable').html('<tr><td>No data found</td></tr>');",
			"          return;",
			"        }",
			"        let html = '<thead><tr>';",
			"        rootChildren.first().children().each(function() {",
			"          html += `<th>${this.tagName}</th>`;",
			"        });",
			"        html += '</tr></thead><tbody>';",
			"        rootChildren.each(function() {",
			"          html += '<tr>';",
			"          $(this).children().each(function() {",
			"            html += `<td>${$(this).text()}</td>`;",
			"          });",
			"          html += '</tr>';",
			"        });",
			"        html += '</tbody>';",
			"        $('#dataTable').html(html);",
			"      },",
			"      error: function() {",
			"        $('#dataTable').html('<tr><td>Error loading XML</td></tr>');",
			"      }",
			"    });",
			"  });",
			"</script>"
		],
		"description": "Dynamically load any XML and generate table with dynamic headers and rows"
	},
	"tempDataXmlToPieChart": {
		"prefix": "tempDataXmlToPieChart",
		"body": [
			"<canvas id=\"myPieChart\" width=\"400\" height=\"400\"></canvas>",
			"<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>",
			"<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>",
			"<script>",
			"  $(document).ready(function() {",
			"    $.get({",
			"      url: '${1:data.xml}',",
			"      dataType: 'xml',",
			"      success: function(xml) {",
			"        const rootChildren = $(xml).children().first().children();",
			"        if(!rootChildren.length) {",
			"          alert('No data found in XML');",
			"          return;",
			"        }",
			"        const labels = [];",
			"        const data = [];",
			"        const firstChild = rootChildren.first();",
			"        const children = firstChild.children();",
			"        if(children.length < 2) {",
			"          alert('XML data must have at least 2 child elements per item for label and value');",
			"          return;",
			"        }",
			"        rootChildren.each(function() {",
			"          labels.push($(this).children().first().text());",
			"          data.push(parseFloat($(this).children().eq(1).text()) || 0);",
			"        });",
			"        const ctx = document.getElementById('myPieChart').getContext('2d');",
			"        new Chart(ctx, {",
			"          type: 'pie',",
			"          data: {",
			"            labels: labels,",
			"            datasets: [{",
			"              data: data,",
			"              backgroundColor: [",
			"                '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'",
			"              ]",
			"            }]",
			"          },",
			"          options: { responsive: true }",
			"        });",
			"      },",
			"      error: function() {",
			"        alert('Error loading XML file');",
			"      }",
			"    });",
			"  });",
			"</script>"
		],
		"description": "Generate a pie chart dynamically from any XML file with label and value"
	},
	"tempDataXmlToBarChart": {
		"prefix": "tempDataXmlToBarChart",
		"body": [
			"<canvas id=\"myBarChart\" width=\"400\" height=\"400\"></canvas>",
			"<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>",
			"<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>",
			"<script>",
			"  $(document).ready(function() {",
			"    $.get({",
			"      url: '${1:data.xml}',",
			"      dataType: 'xml',",
			"      success: function(xml) {",
			"        const rootChildren = $(xml).children().first().children();",
			"        if(!rootChildren.length) {",
			"          alert('No data found in XML');",
			"          return;",
			"        }",
			"        const labels = [];",
			"        const data = [];",
			"        const firstChild = rootChildren.first();",
			"        const children = firstChild.children();",
			"        if(children.length < 2) {",
			"          alert('XML data must have at least 2 child elements per item for label and value');",
			"          return;",
			"        }",
			"        rootChildren.each(function() {",
			"          labels.push($(this).children().first().text());",
			"          data.push(parseFloat($(this).children().eq(1).text()) || 0);",
			"        });",
			"        const ctx = document.getElementById('myBarChart').getContext('2d');",
			"        new Chart(ctx, {",
			"          type: 'bar',",
			"          data: {",
			"            labels: labels,",
			"            datasets: [{",
			"              label: '${2:Dataset}',",
			"              data: data,",
			"              backgroundColor: '#36A2EB'",
			"            }]",
			"          },",
			"          options: { responsive: true }",
			"        });",
			"      },",
			"      error: function() {",
			"        alert('Error loading XML file');",
			"      }",
			"    });",
			"  });",
			"</script>"
		],
		"description": "Generate a bar chart dynamically from any XML file with label and value"
	},
	"tempDataJsonToPie": {
		"prefix": "tempDataJsonToPie",
		"body": [
			"<canvas id=\"pieChart\" width=\"400\" height=\"400\"></canvas>",
			"<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>",
			"<script>",
			"  const pieData = {",
			"    labels: ['North', 'South', 'East', 'West'],",
			"    datasets: [{",
			"      label: 'Sales by Territory',",
			"      data: [120, 150, 100, 130],",
			"      backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0'],",
			"      hoverOffset: 30,",
			"      borderWidth: 1,",
			"      borderColor: '#fff'",
			"    }]",
			"  };",
			"  const pieConfig = {",
			"    type: 'pie',",
			"    data: pieData,",
			"    options: {",
			"      responsive: true,",
			"      plugins: {",
			"        legend: { position: 'top' },",
			"        tooltip: { enabled: true, mode: 'index' }",
			"      }",
			"    }",
			"  };",
			"  new Chart(document.getElementById('pieChart'), pieConfig);",
			"</script>"
		],
		"description": "Static pie chart with JSON data"
	},
	"tempDataJsonToDonut": {
		"prefix": "tempDataJsonToDonut",
		"body": [
			"<canvas id=\"donutChart\" width=\"400\" height=\"400\"></canvas>",
			"<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>",
			"<script>",
			"  const donutData = {",
			"    labels: ['North', 'South', 'East', 'West'],",
			"    datasets: [{",
			"      label: 'Sales by Territory',",
			"      data: [120, 150, 100, 130],",
			"      backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0'],",
			"      borderWidth: 2,",
			"      borderColor: '#fff'",
			"    }]",
			"  };",
			"  const donutConfig = {",
			"    type: 'doughnut',",
			"    data: donutData,",
			"    options: {",
			"      responsive: true,",
			"      cutout: '50%',",
			"      plugins: {",
			"        legend: { position: 'right' },",
			"        tooltip: { enabled: true }",
			"      }",
			"    }",
			"  };",
			"  new Chart(document.getElementById('donutChart'), donutConfig);",
			"</script>"
		],
		"description": "Static donut chart with JSON data"
	},
	"tempDataJsonToBar": {
		"prefix": "tempDataJsonToBar",
		"body": [
			"<canvas id=\"barChart\" width=\"400\" height=\"400\"></canvas>",
			"<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>",
			"<script>",
			"  const barData = {",
			"    labels: ['North', 'South', 'East', 'West'],",
			"    datasets: [{",
			"      label: 'Sales by Territory',",
			"      data: [120, 150, 100, 130],",
			"      backgroundColor: '#36A2EB',",
			"      borderColor: '#2a7ae2',",
			"      borderWidth: 1",
			"    }]",
			"  };",
			"  const barConfig = {",
			"    type: 'bar',",
			"    data: barData,",
			"    options: {",
			"      responsive: true,",
			"      scales: {",
			"        y: {",
			"          beginAtZero: true,",
			"          ticks: { stepSize: 20 }",
			"        }",
			"      },",
			"      plugins: {",
			"        legend: { display: true, position: 'top' },",
			"        tooltip: { enabled: true, mode: 'nearest' }",
			"      }",
			"    }",
			"  };",
			"  new Chart(document.getElementById('barChart'), barConfig);",
			"</script>"
		],
		"description": "Static bar chart with JSON data"
	},
	"tempDataJsonToTable": {
		"prefix": "tempDataJsonToTable",
		"body": [
			"<table border=\"1\" style=\"border-collapse: collapse; width: 50%;\">",
			"  <thead>",
			"    <tr><th>Territory</th><th>Amount</th></tr>",
			"  </thead>",
			"  <tbody>",
			"    <tr><td>North</td><td>120</td></tr>",
			"    <tr><td>South</td><td>150</td></tr>",
			"    <tr><td>East</td><td>100</td></tr>",
			"    <tr><td>West</td><td>130</td></tr>",
			"  </tbody>",
			"</table>"
		],
		"description": "Static table with JSON data"
	},
	"tempGoogleCDN": {
		"prefix": "tempGoogleCDN",
		"body": [
			"<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>"
		],
		"description": "Google Charts CDN loader"
	},
	"tempGooglePieChart": {
		"prefix": "tempGooglePieChart",
		"body": [
			"<div id=\"piechart\" style=\"width: 600px; height: 400px;\"></div>",
			"<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>",
			"<script type=\"text/javascript\">",
			"  google.charts.load('current', {packages:['corechart']});",
			"  google.charts.setOnLoadCallback(drawChart);",
			"  function drawChart() {",
			"    var data = google.visualization.arrayToDataTable([",
			"      ['Territory', 'Sales'],",
			"      ['North', 120],",
			"      ['South', 150],",
			"      ['East', 100],",
			"      ['West', 130]",
			"    ]);",
			"    var options = {",
			"      title: 'Sales by Territory',",
			"      pieHole: 0,",
			"      legend: 'right',",
			"      is3D: false",
			"    };",
			"    var chart = new google.visualization.PieChart(document.getElementById('piechart'));",
			"    chart.draw(data, options);",
			"  }",
			"</script>"
		],
		"description": "Static Google Pie Chart"
	},
	"tempGoogleDonutChart": {
		"prefix": "tempGoogleDonutChart",
		"body": [
			"<div id=\"donutchart\" style=\"width: 600px; height: 400px;\"></div>",
			"<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>",
			"<script type=\"text/javascript\">",
			"  google.charts.load('current', {packages:['corechart']});",
			"  google.charts.setOnLoadCallback(drawChart);",
			"  function drawChart() {",
			"    var data = google.visualization.arrayToDataTable([",
			"      ['Territory', 'Sales'],",
			"      ['North', 120],",
			"      ['South', 150],",
			"      ['East', 100],",
			"      ['West', 130]",
			"    ]);",
			"    var options = {",
			"      title: 'Sales by Territory',",
			"      pieHole: 0.4,",
			"      legend: { position: 'right' }",
			"    };",
			"    var chart = new google.visualization.PieChart(document.getElementById('donutchart'));",
			"    chart.draw(data, options);",
			"  }",
			"</script>"
		],
		"description": "Static Google Donut Chart"
	},
	"tempGoogleBarChart": {
		"prefix": "tempGoogleBarChart",
		"body": [
			"<div id=\"barchart\" style=\"width: 600px; height: 400px;\"></div>",
			"<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>",
			"<script type=\"text/javascript\">",
			"  google.charts.load('current', {packages:['bar']});",
			"  google.charts.setOnLoadCallback(drawChart);",
			"  function drawChart() {",
			"    var data = google.visualization.arrayToDataTable([",
			"      ['Territory', 'Sales'],",
			"      ['North', 120],",
			"      ['South', 150],",
			"      ['East', 100],",
			"      ['West', 130]",
			"    ]);",
			"    var options = {",
			"      chart: { title: 'Sales by Territory' },",
			"      bars: 'vertical'",
			"    };",
			"    var chart = new google.charts.Bar(document.getElementById('barchart'));",
			"    chart.draw(data, google.charts.Bar.convertOptions(options));",
			"  }",
			"</script>"
		],
		"description": "Static Google Bar Chart"
	},
	"tempGoogleColumnChart": {
		"prefix": "tempGoogleColumnChart",
		"body": [
			"<div id=\"columnchart\" style=\"width: 600px; height: 400px;\"></div>",
			"<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>",
			"<script type=\"text/javascript\">",
			"  google.charts.load('current', {packages:['corechart']});",
			"  google.charts.setOnLoadCallback(drawChart);",
			"  function drawChart() {",
			"    var data = google.visualization.arrayToDataTable([",
			"      ['Territory', 'Sales'],",
			"      ['North', 120],",
			"      ['South', 150],",
			"      ['East', 100],",
			"      ['West', 130]",
			"    ]);",
			"    var options = {",
			"      title: 'Sales by Territory',",
			"      legend: { position: 'none' },",
			"      hAxis: { title: 'Territory' },",
			"      vAxis: { title: 'Sales', minValue: 0 }",
			"    };",
			"    var chart = new google.visualization.ColumnChart(document.getElementById('columnchart'));",
			"    chart.draw(data, options);",
			"  }",
			"</script>"
		],
		"description": "Static Google Column Chart"
	},
	"tempGoogleGanttChart": {
		"prefix": "tempGoogleGanttChart",
		"body": [
			"<div id=\"ganttchart\" style=\"width: 800px; height: 400px;\"></div>",
			"<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>",
			"<script type=\"text/javascript\">",
			"  google.charts.load('current', {'packages':['gantt']});",
			"  google.charts.setOnLoadCallback(drawChart);",
			"  function drawChart() {",
			"    var data = new google.visualization.DataTable();",
			"    data.addColumn('string', 'Task ID');",
			"    data.addColumn('string', 'Task Name');",
			"    data.addColumn('string', 'Resource');",
			"    data.addColumn('date', 'Start Date');",
			"    data.addColumn('date', 'End Date');",
			"    data.addColumn('number', 'Duration');",
			"    data.addColumn('number', 'Percent Complete');",
			"    data.addColumn('string', 'Dependencies');",
			"",
			"    data.addRows([",
			"      ['Research', 'Find sources', null, new Date(2025, 4, 1), new Date(2025, 4, 5), null,  100,  null],",
			"      ['Write', 'Write paper', 'write', null, new Date(2025, 4, 9), 4 * 24 * 60 * 60 * 1000, 25, 'Research'],",
			"      ['Cite', 'Create citations', 'write', null, new Date(2025, 4, 7), 3 * 24 * 60 * 60 * 1000, 20, 'Research'],",
			"      ['Complete', 'Complete paper', null, null, new Date(2025, 4, 10), 1 * 24 * 60 * 60 * 1000, 0, 'Cite,Write'],",
			"      ['Submit', 'Submit paper', null, null, new Date(2025, 4, 10), 1 * 24 * 60 * 60 * 1000, 0, 'Complete']",
			"    ]);",
			"",
			"    var options = {",
			"      height: 300,",
			"      gantt: {",
			"        trackHeight: 30",
			"      }",
			"    };",
			"",
			"    var chart = new google.visualization.Gantt(document.getElementById('ganttchart'));",
			"    chart.draw(data, options);",
			"  }",
			"</script>"
		],
		"description": "Static Google Gantt Chart"
	},
	"tempGoogleLineChart": {
		"prefix": "tempGoogleLineChart",
		"body": [
			"<div id=\"linechart\" style=\"width: 600px; height: 400px;\"></div>",
			"<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>",
			"<script type=\"text/javascript\">",
			"  google.charts.load('current', {packages:['corechart']});",
			"  google.charts.setOnLoadCallback(drawChart);",
			"  function drawChart() {",
			"    var data = google.visualization.arrayToDataTable([",
			"      ['Month', 'Sales'],",
			"      ['Jan',  100],",
			"      ['Feb',  120],",
			"      ['Mar',  130],",
			"      ['Apr',  90],",
			"      ['May',  70],",
			"      ['Jun',  100]",
			"    ]);",
			"    var options = {",
			"      title: 'Monthly Sales',",
			"      curveType: 'function',",
			"      legend: { position: 'bottom' }",
			"    };",
			"    var chart = new google.visualization.LineChart(document.getElementById('linechart'));",
			"    chart.draw(data, options);",
			"  }",
			"</script>"
		],
		"description": "Static Google Line Chart"
	},
	"tempGoogleAreaChart": {
		"prefix": "tempGoogleAreaChart",
		"body": [
			"<div id=\"areachart\" style=\"width: 600px; height: 400px;\"></div>",
			"<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>",
			"<script type=\"text/javascript\">",
			"  google.charts.load('current', {packages:['corechart']});",
			"  google.charts.setOnLoadCallback(drawChart);",
			"  function drawChart() {",
			"    var data = google.visualization.arrayToDataTable([",
			"      ['Year', 'Sales'],",
			"      ['2019',  1000],",
			"      ['2020',  1170],",
			"      ['2021',  660],",
			"      ['2022',  1030]",
			"    ]);",
			"    var options = {",
			"      title: 'Company Sales',",
			"      hAxis: { title: 'Year' },",
			"      vAxis: { minValue: 0 },",
			"      legend: { position: 'bottom' }",
			"    };",
			"    var chart = new google.visualization.AreaChart(document.getElementById('areachart'));",
			"    chart.draw(data, options);",
			"  }",
			"</script>"
		],
		"description": "Static Google Area Chart"
	},
	"tempCanvasJSBar": {
		"prefix": "tempCanvasJSBar",
		"body": [
			"<div id=\"barChartContainer\" style=\"height: 370px; width: 100%;\"></div>",
			"<script src=\"https://canvasjs.com/assets/script/canvasjs.min.js\"></script>",
			"<script>",
			"window.onload = function () {",
			"  var chart = new CanvasJS.Chart(\"barChartContainer\", {",
			"    animationEnabled: true,",
			"    title: {",
			"      text: \"Bar Chart Example\"",
			"    },",
			"    axisX: {",
			"      title: \"Categories\"",
			"    },",
			"    axisY: {",
			"      title: \"Values\"",
			"    },",
			"    toolTip: {",
			"      shared: true",
			"    },",
			"    legend: {",
			"      cursor: \"pointer\",",
			"      itemclick: toggleDataSeries",
			"    },",
			"    data: [{",
			"      type: \"bar\",",
			"      name: \"Dataset 1\",",
			"      showInLegend: true,",
			"      dataPoints: [",
			"        { label: \"A\", y: 10 },",
			"        { label: \"B\", y: 20 },",
			"        { label: \"C\", y: 30 }",
			"      ]",
			"    }]",
			"  });",
			"  chart.render();",
			"",
			"  function toggleDataSeries(e) {",
			"    if (typeof(e.dataSeries.visible) === \"undefined\" || e.dataSeries.visible) {",
			"      e.dataSeries.visible = false;",
			"    } else {",
			"      e.dataSeries.visible = true;",
			"    }",
			"    chart.render();",
			"  }",
			"}",
			"</script>"
		],
		"description": "CanvasJS Bar Chart Snippet with proper escaping"
	},
	"tempCanvasJSLine": {
		"prefix": "tempCanvasJSLine",
		"body": [
			"<div id=\"lineChartContainer\" style=\"height: 370px; width: 100%;\"></div>",
			"<script src=\"https://canvasjs.com/assets/script/canvasjs.min.js\"></script>",
			"<script>",
			"window.onload = function () {",
			"  var chart = new CanvasJS.Chart(\"lineChartContainer\", {",
			"    animationEnabled: true,",
			"    title: { text: \"Line Chart Example\" },",
			"    axisX: { title: \"X-Axis\" },",
			"    axisY: { title: \"Y-Axis\" },",
			"    data: [{",
			"      type: \"line\",",
			"      dataPoints: [",
			"        { x: 1, y: 10 },",
			"        { x: 2, y: 15 },",
			"        { x: 3, y: 25 },",
			"        { x: 4, y: 30 }",
			"      ]",
			"    }]",
			"  });",
			"  chart.render();",
			"}",
			"</script>"
		],
		"description": "CanvasJS Line Chart"
	},
	"tempCanvasJSColumn": {
		"prefix": "tempCanvasJSColumn",
		"body": [
			"<div id=\"columnChartContainer\" style=\"height: 370px; width: 100%;\"></div>",
			"<script src=\"https://canvasjs.com/assets/script/canvasjs.min.js\"></script>",
			"<script>",
			"window.onload = function () {",
			"  var chart = new CanvasJS.Chart(\"columnChartContainer\", {",
			"    animationEnabled: true,",
			"    title: { text: \"Column Chart Example\" },",
			"    axisX: { title: \"Categories\" },",
			"    axisY: { title: \"Values\" },",
			"    data: [{",
			"      type: \"column\",",
			"      dataPoints: [",
			"        { label: \"A\", y: 10 },",
			"        { label: \"B\", y: 20 },",
			"        { label: \"C\", y: 30 }",
			"      ]",
			"    }]",
			"  });",
			"  chart.render();",
			"}",
			"</script>"
		],
		"description": "CanvasJS Column Chart"
	},
	"tempCanvasJSPie": {
		"prefix": "tempCanvasJSPie",
		"body": [
			"<div id=\"pieChartContainer\" style=\"height: 370px; width: 100%;\"></div>",
			"<script src=\"https://canvasjs.com/assets/script/canvasjs.min.js\"></script>",
			"<script>",
			"window.onload = function () {",
			"  var chart = new CanvasJS.Chart(\"pieChartContainer\", {",
			"    animationEnabled: true,",
			"    title: { text: \"Pie Chart Example\" },",
			"    data: [{",
			"      type: \"pie\",",
			"      showInLegend: true,",
			"      legendText: \"{label}\",",
			"      dataPoints: [",
			"        { label: \"Apple\", y: 30 },",
			"        { label: \"Banana\", y: 20 },",
			"        { label: \"Cherry\", y: 25 },",
			"        { label: \"Grapes\", y: 15 }",
			"      ]",
			"    }]",
			"  });",
			"  chart.render();",
			"}",
			"</script>"
		],
		"description": "CanvasJS Pie Chart"
	},
	"tempCanvasJSDonut": {
		"prefix": "tempCanvasJSDonut",
		"body": [
			"<div id=\"donutChartContainer\" style=\"height: 370px; width: 100%;\"></div>",
			"<script src=\"https://canvasjs.com/assets/script/canvasjs.min.js\"></script>",
			"<script>",
			"window.onload = function () {",
			"  var chart = new CanvasJS.Chart(\"donutChartContainer\", {",
			"    animationEnabled: true,",
			"    title: { text: \"Donut Chart Example\" },",
			"    data: [{",
			"      type: \"doughnut\",",
			"      showInLegend: true,",
			"      legendText: \"{label}\",",
			"      dataPoints: [",
			"        { label: \"Chrome\", y: 45 },",
			"        { label: \"Firefox\", y: 25 },",
			"        { label: \"Edge\", y: 15 },",
			"        { label: \"Safari\", y: 15 }",
			"      ]",
			"    }]",
			"  });",
			"  chart.render();",
			"}",
			"</script>"
		],
		"description": "CanvasJS Donut Chart"
	},
	"tempGoogleDashboard": {
		"prefix": "tempGoogleDashboard",
		"body": [
			"<script src=\"https://www.gstatic.com/charts/loader.js\"></script>",
			"",
			"<div style=\"display:flex; gap:40px;\">",
			"  <div id=\"bar\" style=\"width:400px; height:300px;\"></div>",
			"  <div id=\"pie\" style=\"width:300px; height:300px;\"></div>",
			"</div>",
			"",
			"<script>",
			"  google.charts.load('current', {'packages':['corechart']});",
			"  google.charts.setOnLoadCallback(drawCharts);",
			"",
			"  function drawCharts() {",
			"    const data = google.visualization.arrayToDataTable([",
			"      ['Region', 'Apples', 'Bananas', 'Cherries'],",
			"      ['North', 1000, 400, 200],",
			"      ['South', 1170, 460, 250],",
			"      ['East', 660, 1120, 300],",
			"      ['West', 1030, 540, 350]",
			"    ]);",
			"",
			"    const bar = new google.visualization.BarChart(document.getElementById('bar'));",
			"    const pie = new google.visualization.PieChart(document.getElementById('pie'));",
			"",
			"    bar.draw(data, {title:'Fruit Sales by Region', legend: 'top', chartArea: {width: '60%'}});",
			"",
			"    drawPieChart(); // initial total pie chart",
			"",
			"    google.visualization.events.addListener(bar, 'select', function() {",
			"      const selection = bar.getSelection();",
			"      if (selection.length === 0) {",
			"        drawPieChart();  // no selection — draw total",
			"      } else {",
			"        drawPieChart(selection[0].row); // draw for selected region",
			"      }",
			"    });",
			"",
			"    function drawPieChart(row) {",
			"      let pieData;",
			"      if (row === undefined) {",
			"        // Sum all regions",
			"        let apples=0, bananas=0, cherries=0;",
			"        for(let i=0; i < data.getNumberOfRows(); i++) {",
			"          apples += data.getValue(i,1);",
			"          bananas += data.getValue(i,2);",
			"          cherries += data.getValue(i,3);",
			"        }",
			"        pieData = google.visualization.arrayToDataTable([",
			"          ['Fruit', 'Quantity'],",
			"          ['Apples', apples],",
			"          ['Bananas', bananas],",
			"          ['Cherries', cherries]",
			"        ]);",
			"        pie.draw(pieData, {title: 'Total Fruit Distribution'});",
			"      } else {",
			"        pieData = google.visualization.arrayToDataTable([",
			"          ['Fruit', 'Quantity'],",
			"          ['Apples', data.getValue(row,1)],",
			"          ['Bananas', data.getValue(row,2)],",
			"          ['Cherries', data.getValue(row,3)]",
			"        ]);",
			"        pie.draw(pieData, {title: `Fruit in ${data.getValue(row,0)}`});",
			"      }",
			"    }",
			"  }",
			"</script>"
		],
		"description": "Simple interconnected dashboard with Google Charts Bar and Pie charts"
	},
	"tempD3_selectById": {
		"prefix": "tempD3SelectId",
		"body": [
			"d3.select(\"#$1\").$2();"
		],
		"description": "Select an element by ID"
	},
	"tempD3_selectAllByClass": {
		"prefix": "tempD3SelectAllClass",
		"body": [
			"d3.selectAll(\".$1\").$2();"
		],
		"description": "Select all elements by class"
	},
	"tempD3_changeText": {
		"prefix": "tempD3ChangeText",
		"body": [
			"d3.select('#elem').text('New Text');"
		],
		"description": "Set text content"
	},
	"tempD3_appendElement": {
		"prefix": "tempD3Append",
		"body": [
			"d3.select('body').append('div').attr('class', 'box').text('Appended Div');"
		],
		"description": "Append a div with class and text"
	},
	"tempD3_insertElement": {
		"prefix": "tempD3Insert",
		"body": [
			"d3.select('#container').insert('p', ':first-child').text('Inserted Paragraph');"
		],
		"description": "Insert paragraph as first child"
	},
	"tempD3_removeElement": {
		"prefix": "tempD3Remove",
		"body": [
			"d3.select('#toRemove').remove();"
		],
		"description": "Remove element from DOM"
	},
	"tempD3_setHtml": {
		"prefix": "tempD3SetHtml",
		"body": [
			"d3.select('#content').html('<strong>Bold Text</strong>');"
		],
		"description": "Set inner HTML"
	},
	"tempD3_setAttr": {
		"prefix": "tempD3SetAttr",
		"body": [
			"d3.select('#elem').attr('width', 100).attr('height', 50);"
		],
		"description": "Set multiple attributes"
	},
	"tempD3_setStyle": {
		"prefix": "tempD3SetStyle",
		"body": [
			"d3.select('#elem').style('background-color', 'lightblue');"
		],
		"description": "Set CSS style"
	},
	"tempD3_setClassed": {
		"prefix": "tempD3SetClassed",
		"body": [
			"d3.select('#elem').classed('active', true);"
		],
		"description": "Add or remove class"
	},
	"tempD3_anonFunctionAttr": {
		"prefix": "tempD3AnonAttr",
		"body": [
			"d3.selectAll('div').attr('data-index', (d, i) => i);"
		],
		"description": "Set attribute using anonymous function with index"
	},
	"tempD3_svgLine": {
		"prefix": "tempD3SvgLine",
		"body": [
			"const svg = d3.select('body').append('svg').attr('width', 300).attr('height', 200);",
			"const line = d3.line()",
			"  .x(d => d.x)",
			"  .y(d => d.y);",
			"const data = [{x:10,y:50},{x:100,y:150},{x:200,y:80}];",
			"svg.append('path')",
			"  .datum(data)",
			"  .attr('fill', 'none')",
			"  .attr('stroke', 'steelblue')",
			"  .attr('stroke-width', 2)",
			"  .attr('d', line);"
		],
		"description": "Draw a line path using SVG"
	},
	"tempD3_svgRect": {
		"prefix": "tempD3SvgRect",
		"body": [
			"d3.select('body').append('svg').attr('width', 200).attr('height', 100)",
			"  .append('rect')",
			"  .attr('x', 20)",
			"  .attr('y', 20)",
			"  .attr('width', 150)",
			"  .attr('height', 50)",
			"  .attr('fill', 'orange');"
		],
		"description": "Draw rectangle in SVG"
	},
	"tempD3_transition": {
		"prefix": "tempD3Transition",
		"body": [
			"d3.select('#elem')",
			"  .transition()",
			"  .duration(1000)",
			"  .ease(d3.easeCubic)",
			"  .delay(200)",
			"  .style('opacity', 0.5);"
		],
		"description": "Animate style with transition"
	},
	"tempD3_eventOnClick": {
		"prefix": "tempD3EventOnClick",
		"body": [
			"d3.select('#button').on('click', function(event, d) {",
			"  console.log('Clicked:', event);",
			"});"
		],
		"description": "Add click event listener"
	},
	"tempD3_dispatchCustomEvent": {
		"prefix": "tempD3Dispatch",
		"body": [
			"const dispatch = d3.dispatch('customEvent');",
			"dispatch.on('customEvent', data => console.log('Event received:', data));",
			"dispatch.call('customEvent', null, {msg: 'hello'});"
		],
		"description": "Create and dispatch custom event"
	},
	"tempD3_getMousePosition": {
		"prefix": "tempD3MousePos",
		"body": [
			"d3.select('svg').on('mousemove', function(event) {",
			"  const [x, y] = d3.pointer(event);",
			"  console.log('Mouse:', x, y);",
			"});"
		],
		"description": "Get mouse coordinates inside SVG"
	},
	"tempD3_scaleLinear": {
		"prefix": "tempD3ScaleLinear",
		"body": [
			"const scale = d3.scaleLinear()",
			"  .domain([0, 100])",
			"  .range([0, 500]);",
			"console.log(scale(50)); // maps 50 to 250"
		],
		"description": "Create a linear scale"
	},
	"tempD3_axisLeft": {
		"prefix": "tempD3AxisLeft",
		"body": [
			"const scale = d3.scaleLinear().domain([0, 10]).range([100, 0]);",
			"const axis = d3.axisLeft(scale);",
			"d3.select('svg').append('g').attr('transform', 'translate(50,20)').call(axis);"
		],
		"description": "Create left axis"
	},
	"tempD3_axisTop": {
		"prefix": "tempD3AxisTop",
		"body": [
			"const scale = d3.scaleLinear().domain([0, 10]).range([0, 100]);",
			"const axis = d3.axisTop(scale);",
			"d3.select('svg').append('g').attr('transform', 'translate(20,20)').call(axis);"
		],
		"description": "Create top axis"
	},
	"tempD3_loadFilterJson": {
		"prefix": "tempD3LoadFilterJson",
		"body": [
			"d3.json('data.json').then(data => {",
			"  const filtered = data.filter(d => d.value > 10);",
			"  console.log(filtered);",
			"});"
		],
		"description": "Load external JSON and filter items"
	},
	"tempD3_CDN": {
		"prefix": "tempD3cdn",
		"body": [
			"<script src=\"https://cdn.jsdelivr.net/npm/d3@7/dist/d3.min.js\"></script>"
		],
		"description": "Include D3.js from CDN (latest version 7)"
	},
	"tempD3ChartBar": {
		"prefix": "tempD3ChartBar",
		"body": [
			"<script src=\"https://cdn.jsdelivr.net/npm/d3@7/dist/d3.min.js\"></script>",
			"<div id=\"barChart\"></div>",
			"<script>",
			"  const data = [30, 80, 45, 60, 20];",
			"  const width = 400, height = 300, margin = {top: 30, right: 30, bottom: 50, left: 50};",
			"  const svg = d3.select('#barChart').append('svg')",
			"    .attr('width', width).attr('height', height);",
			"  const x = d3.scaleBand()",
			"    .domain(d3.range(data.length))",
			"    .range([margin.left, width - margin.right])",
			"    .padding(0.1);",
			"  const y = d3.scaleLinear()",
			"    .domain([0, d3.max(data)])",
			"    .nice()",
			"    .range([height - margin.bottom, margin.top]);",
			"  svg.append('g')",
			"    .attr('fill', 'steelblue')",
			"    .selectAll('rect')",
			"    .data(data)",
			"    .join('rect')",
			"      .attr('x', (d,i) => x(i))",
			"      .attr('y', d => y(d))",
			"      .attr('height', d => y(0) - y(d))",
			"      .attr('width', x.bandwidth());",
			"  // X Axis",
			"  svg.append('g')",
			"    .attr('transform', `translate(0,${height - margin.bottom})`)",
			"    .call(d3.axisBottom(x).tickFormat(i => i + 1))",
			"    .append('text')",
			"      .attr('x', width / 2)",
			"      .attr('y', 35)",
			"      .attr('fill', 'black')",
			"      .attr('text-anchor', 'middle')",
			"      .text('Categories');",
			"  // Y Axis",
			"  svg.append('g')",
			"    .attr('transform', `translate(${margin.left},0)`)",
			"    .call(d3.axisLeft(y))",
			"    .append('text')",
			"      .attr('transform', 'rotate(-90)')",
			"      .attr('x', -height / 2)",
			"      .attr('y', -35)",
			"      .attr('fill', 'black')",
			"      .attr('text-anchor', 'middle')",
			"      .text('Value');",
			"</script>"
		],
		"description": "Simple Bar chart with axis labels"
	},
	"tempD3ChartLine": {
		"prefix": "tempD3ChartLine",
		"body": [
			"<script src=\"https://cdn.jsdelivr.net/npm/d3@7/dist/d3.min.js\"></script>",
			"<div id=\"lineChart\"></div>",
			"<script>",
			"  const data = [{x:0,y:10},{x:1,y:40},{x:2,y:25},{x:3,y:60},{x:4,y:50}];",
			"  const width = 400, height = 300, margin = {top: 30, right: 30, bottom: 50, left: 50};",
			"  const svg = d3.select('#lineChart').append('svg').attr('width', width).attr('height', height);",
			"  const x = d3.scaleLinear().domain(d3.extent(data, d => d.x)).range([margin.left, width - margin.right]);",
			"  const y = d3.scaleLinear().domain([0, d3.max(data, d => d.y)]).nice().range([height - margin.bottom, margin.top]);",
			"  const line = d3.line().x(d => x(d.x)).y(d => y(d.y));",
			"  svg.append('path').datum(data)",
			"    .attr('fill', 'none').attr('stroke', 'steelblue').attr('stroke-width', 2)",
			"    .attr('d', line);",
			"  // X Axis",
			"  svg.append('g')",
			"    .attr('transform', `translate(0,${height - margin.bottom})`)",
			"    .call(d3.axisBottom(x))",
			"    .append('text')",
			"      .attr('x', width / 2).attr('y', 35).attr('fill', 'black').attr('text-anchor', 'middle')",
			"      .text('X Axis');",
			"  // Y Axis",
			"  svg.append('g')",
			"    .attr('transform', `translate(${margin.left},0)`).call(d3.axisLeft(y))",
			"    .append('text')",
			"      .attr('transform', 'rotate(-90)').attr('x', -height / 2).attr('y', -35)",
			"      .attr('fill', 'black').attr('text-anchor', 'middle').text('Y Axis');",
			"</script>"
		],
		"description": "Simple Line chart with axis labels"
	},
	"tempD3ChartPie": {
		"prefix": "tempD3ChartPie",
		"body": [
			"<script src=\"https://cdn.jsdelivr.net/npm/d3@7/dist/d3.min.js\"></script>",
			"<div id=\"pieChart\"></div>",
			"<script>",
			"  const data = [10, 20, 30, 40];",
			"  const width = 300, height = 300, radius = Math.min(width, height) / 2;",
			"  const colors = d3.schemeCategory10;",
			"  const svg = d3.select('#pieChart').append('svg')",
			"    .attr('width', width).attr('height', height)",
			"    .append('g').attr('transform', `translate(${width / 2},${height / 2})`);",
			"  const pie = d3.pie();",
			"  const arc = d3.arc().innerRadius(0).outerRadius(radius);",
			"  const arcs = svg.selectAll('arc').data(pie(data)).join('g');",
			"  arcs.append('path').attr('fill', (d,i) => colors[i]).attr('d', arc);",
			"  // Legend",
			"  const legend = svg.append('g').attr('transform', `translate(${radius + 20},${-radius})`);",
			"  data.forEach((d,i) => {",
			"    legend.append('rect').attr('x', 0).attr('y', i * 20).attr('width', 15).attr('height', 15).attr('fill', colors[i]);",
			"    legend.append('text').attr('x', 20).attr('y', i * 20 + 12).text(`Value ${d}`);",
			"  });",
			"</script>"
		],
		"description": "Simple Pie chart with legend"
	},
	"tempD3ChartColumn": {
		"prefix": "tempD3ChartColumn",
		"body": [
			"<script src=\"https://cdn.jsdelivr.net/npm/d3@7/dist/d3.min.js\"></script>",
			"<div id=\"columnChart\"></div>",
			"<script>",
			"  const data = [30, 80, 45, 60, 20];",
			"  const width = 400, height = 300, margin = {top: 30, right: 30, bottom: 50, left: 50};",
			"  const svg = d3.select('#columnChart').append('svg').attr('width', width).attr('height', height);",
			"  const y = d3.scaleBand()",
			"    .domain(d3.range(data.length))",
			"    .range([margin.top, height - margin.bottom])",
			"    .padding(0.1);",
			"  const x = d3.scaleLinear()",
			"    .domain([0, d3.max(data)])",
			"    .nice()",
			"    .range([margin.left, width - margin.right]);",
			"  svg.append('g').attr('fill', 'steelblue')",
			"    .selectAll('rect').data(data).join('rect')",
			"    .attr('y', (d,i) => y(i))",
			"    .attr('x', x(0))",
			"    .attr('height', y.bandwidth())",
			"    .attr('width', d => x(d) - x(0));",
			"  // X Axis",
			"  svg.append('g')",
			"    .attr('transform', `translate(0,${height - margin.bottom})`)",
			"    .call(d3.axisBottom(x))",
			"    .append('text')",
			"      .attr('x', width / 2).attr('y', 35).attr('fill', 'black').attr('text-anchor', 'middle')",
			"      .text('Value');",
			"  // Y Axis",
			"  svg.append('g')",
			"    .attr('transform', `translate(${margin.left},0)`).call(d3.axisLeft(y).tickFormat(i => i + 1))",
			"    .append('text')",
			"      .attr('transform', 'rotate(-90)').attr('x', -height / 2).attr('y', -35)",
			"      .attr('fill', 'black').attr('text-anchor', 'middle').text('Categories');",
			"</script>"
		],
		"description": "Simple Horizontal Column chart with axis labels"
	},
	"tempD3ChartDonut": {
		"prefix": "tempD3ChartDonut",
		"body": [
			"<!-- D3 CDN -->",
			"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/7.8.5/d3.min.js\"></script>",
			"<div id=\"donutChart\"></div>",
			"<script>",
			"const data = [25, 15, 35, 25];",
			"const categories = ['Red', 'Blue', 'Green', 'Yellow'];",
			"const width = 400, height = 400, radius = Math.min(width, height) / 2;",
			"const colors = d3.schemeSet2;",
			"",
			"const svg = d3.select('#donutChart')",
			"  .append('svg')",
			"  .attr('width', width + 150) // space for legend",
			"  .attr('height', height)",
			"  .append('g')",
			"  .attr('transform', `translate(${width / 2},${height / 2})`);",
			"",
			"const pie = d3.pie();",
			"const arc = d3.arc()",
			"  .innerRadius(radius * 0.6)  // Donut hole size",
			"  .outerRadius(radius);",
			"",
			"// Draw donut slices",
			"svg.selectAll('path')",
			"  .data(pie(data))",
			"  .enter()",
			"  .append('path')",
			"  .attr('d', arc)",
			"  .attr('fill', (d, i) => colors[i])",
			"  .attr('stroke', 'white')",
			"  .style('stroke-width', '2px');",
			"",
			"// Add legend group",
			"const legend = svg.append('g').attr('transform', `translate(${radius + 20},${-radius})`);",
			"",
			"// Draw legend colored boxes and text",
			"categories.forEach((cat, i) => {",
			"  legend.append('rect')",
			"    .attr('x', 0)",
			"    .attr('y', i * 20)",
			"    .attr('width', 15)",
			"    .attr('height', 15)",
			"    .attr('fill', colors[i]);",
			"",
			"  legend.append('text')",
			"    .attr('x', 20)",
			"    .attr('y', i * 20 + 12)",
			"    .text(cat)",
			"    .style('font-size', '12px');",
			"});",
			"</script>"
		],
		"description": "Donut Chart with legend, category labels, minimal HTML and D3 CDN"
	},
	"SVG Basic Shapes": {
		"prefix": "svg_shape",
		"body": [
			"<!DOCTYPE html>",
			"<html lang=\"en\">",
			"<head>",
			"    <meta charset=\"UTF-8\">",
			"    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
			"    <title>SVG Basic Shapes</title>",
			"    <style>",
			"        body {",
			"            font-family: Arial, sans-serif;",
			"            margin: 0;",
			"            padding: 20px;",
			"            background-color: #f0f0f0;",
			"            display: flex;",
			"            flex-wrap: wrap;",
			"            justify-content: center;",
			"            gap: 20px;",
			"        }",
			"        .shape-container {",
			"            background-color: #fff;",
			"            border: 1px solid #ddd;",
			"            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);",
			"            padding: 20px;",
			"            text-align: center;",
			"        }",
			"        h2 {",
			"            margin: 0 0 10px;",
			"            font-size: 18px;",
			"            color: #333;",
			"        }",
			"        svg {",
			"            display: block;",
			"            margin: 0 auto;",
			"        }",
			"    </style>",
			"</head>",
			"<body>",
			"    <!-- Line -->",
			"    <div class=\"shape-container\">",
			"        <h2>Line</h2>",
			"        <svg width=\"200\" height=\"200\">",
			"            <line x1=\"50\" y1=\"50\" x2=\"150\" y2=\"150\" stroke=\"blue\" stroke-width=\"4\" />",
			"        </svg>",
			"    </div>",
			"    <!-- Circle -->",
			"    <div class=\"shape-container\">",
			"        <h2>Circle</h2>",
			"        <svg width=\"200\" height=\"200\">",
			"            <circle cx=\"100\" cy=\"100\" r=\"50\" fill=\"red\" stroke=\"black\" stroke-width=\"2\" />",
			"        </svg>",
			"    </div>",
			"    <!-- Ellipse -->",
			"    <div class=\"shape-container\">",
			"        <h2>Ellipse</h2>",
			"        <svg width=\"200\" height=\"200\">",
			"            <ellipse cx=\"100\" cy=\"100\" rx=\"80\" ry=\"40\" fill=\"green\" stroke=\"black\" stroke-width=\"2\" />",
			"        </svg>",
			"    </div>",
			"    <!-- Rectangle -->",
			"    <div class=\"shape-container\">",
			"        <h2>Rectangle</h2>",
			"        <svg width=\"200\" height=\"200\">",
			"            <rect x=\"50\" y=\"50\" width=\"100\" height=\"80\" fill=\"yellow\" stroke=\"black\" stroke-width=\"2\" />",
			"        </svg>",
			"    </div>",
			"    <!-- Text -->",
			"    <div class=\"shape-container\">",
			"        <h2>Text</h2>",
			"        <svg width=\"200\" height=\"200\">",
			"            <text x=\"50\" y=\"100\" font-family=\"Arial\" font-size=\"20\" fill=\"purple\">Tej Jikadara!</text>",
			"        </svg>",
			"    </div>",
			"</body>",
			"</html>"
		],
		"description": "HTML snippet containing various basic SVG shapes such as line, circle, ellipse, rectangle, and text."
	},
	"SVG Advanced Graphical Shapes": {
		"prefix": "svg_advanced_graphical_shapes",
		"body": [
			"<!DOCTYPE html>",
			"<html lang=\"en\">",
			"<head>",
			"  <meta charset=\"UTF-8\">",
			"  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
			"  <title>SVG Advanced Graphical Shapes</title>",
			"  <style>",
			"    body {",
			"      font-family: Arial, sans-serif;",
			"      margin: 20px;",
			"    }",
			"    .svg-container {",
			"      display: flex;",
			"      flex-wrap: wrap;",
			"      gap: 20px;",
			"      margin-bottom: 20px;",
			"    }",
			"    svg {",
			"      border: 1px solid #ccc;",
			"    }",
			"    h2 {",
			"      margin-bottom: 10px;",
			"      color: #333;",
			"    }",
			"  </style>",
			"</head>",
			"<body>",
			"  <div class=\"svg-container\">",
			"    <!-- Polygon Element -->",
			"    <div>",
			"      <h2>Polygon</h2>",
			"      <svg width=\"200\" height=\"200\">",
			"        <polygon points=\"100,10 40,198 190,78 10,78 160,198\" ",
			"                 style=\"fill:lime;stroke:purple;stroke-width:5;fill-rule:evenodd;\" />",
			"      </svg>",
			"    </div>",
			"    <!-- Polyline Element -->",
			"    <div>",
			"      <h2>Polyline</h2>",
			"      <svg width=\"200\" height=\"200\">",
			"        <polyline points=\"20,20 40,25 60,40 80,120 120,140 200,180\" ",
			"                  style=\"fill:none;stroke:black;stroke-width:3\" />",
			"      </svg>",
			"    </div>",
			"    <!-- Path Element -->",
			"    <div>",
			"      <h2>Path</h2>",
			"      <svg width=\"200\" height=\"200\">",
			"        <path d=\"M10 80 C 40 10, 65 10, 95 80 S 150 150, 180 80\" ",
			"              stroke=\"black\" fill=\"transparent\" stroke-width=\"5\"/>",
			"      </svg>",
			"    </div>",
			"  </div>",
			"  <div class=\"svg-container\">",
			"    <!-- Radial Gradient -->",
			"    <div>",
			"      <h2>Radial Gradient</h2>",
			"      <svg width=\"200\" height=\"200\">",
			"        <defs>",
			"          <radialGradient id=\"radialGradient1\" cx=\"50%\" cy=\"50%\" r=\"50%\" fx=\"50%\" fy=\"50%\">",
			"            <stop offset=\"0%\" style=\"stop-color:rgb(255,255,0);stop-opacity:1\" />",
			"            <stop offset=\"100%\" style=\"stop-color:rgb(255,0,0);stop-opacity:1\" />",
			"          </radialGradient>",
			"        </defs>",
			"        <circle cx=\"100\" cy=\"100\" r=\"90\" fill=\"url(#radialGradient1)\" />",
			"      </svg>",
			"    </div>",
			"    <!-- Linear Gradient -->",
			"    <div>",
			"      <h2>Linear Gradient</h2>",
			"      <svg width=\"200\" height=\"200\">",
			"        <defs>",
			"          <linearGradient id=\"linearGradient1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">",
			"            <stop offset=\"0%\" style=\"stop-color:rgb(0,0,255);stop-opacity:1\" />",
			"            <stop offset=\"100%\" style=\"stop-color:rgb(0,255,0);stop-opacity:1\" />",
			"          </linearGradient>",
			"        </defs>",
			"        <rect x=\"10\" y=\"10\" width=\"180\" height=\"180\" fill=\"url(#linearGradient1)\" />",
			"      </svg>",
			"    </div>",
			"    <!-- SVG Filters -->",
			"    <div>",
			"      <h2>SVG Filters</h2>",
			"      <svg width=\"200\" height=\"200\">",
			"        <defs>",
			"          <filter id=\"blurFilter\">",
			"            <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"5\" />",
			"          </filter>",
			"          <filter id=\"shadowFilter\">",
			"            <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"3\" result=\"blur\" />",
			"            <feOffset in=\"blur\" dx=\"5\" dy=\"5\" result=\"offsetBlur\" />",
			"            <feMerge>",
			"              <feMergeNode in=\"offsetBlur\" />",
			"              <feMergeNode in=\"SourceGraphic\" />",
			"            </feMerge>",
			"          </filter>",
			"        </defs>",
			"        <circle cx=\"50\" cy=\"50\" r=\"40\" fill=\"orange\" filter=\"url(#blurFilter)\" />",
			"        <rect x=\"100\" y=\"20\" width=\"80\" height=\"80\" fill=\"blue\" filter=\"url(#shadowFilter)\" />",
			"      </svg>",
			"    </div>",
			"  </div>",
			"</body>",
			"</html>"
		],
		"description": "HTML snippet containing advanced SVG graphical shapes including polygon, polyline, path, gradients, and filters."
	},
	"SVG Animations": {
		"prefix": "svg_animations",
		"body": [
			"<!DOCTYPE html>",
			"<html lang=\"en\">",
			"<head>",
			"  <meta charset=\"UTF-8\">",
			"  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
			"  <title>SVG Animations</title>",
			"  <style>",
			"    body {",
			"      font-family: Arial, sans-serif;",
			"      margin: 20px;",
			"    }",
			"    h2 {",
			"      color: #333;",
			"      margin-bottom: 10px;",
			"    }",
			"    svg {",
			"      border: 1px solid #ccc;",
			"      margin-bottom: 40px;",
			"    }",
			"  </style>",
			"</head>",
			"<body>",
			"  <h1>SVG Animations</h1>",
			"  <h2>1. Weather Forecast Interface</h2>",
			"  <svg width=\"600\" height=\"300\">",
			"    <circle cx=\"50\" cy=\"50\" r=\"30\" fill=\"yellow\">",
			"      <animate attributeName=\"cx\" from=\"50\" to=\"550\" dur=\"10s\" repeatCount=\"indefinite\" />",
			"    </circle>",
			"    <g>",
			"      <circle cx=\"100\" cy=\"100\" r=\"20\" fill=\"white\" />",
			"      <circle cx=\"130\" cy=\"100\" r=\"25\" fill=\"white\" />",
			"      <circle cx=\"120\" cy=\"80\" r=\"20\" fill=\"white\" />",
			"      <animateTransform attributeName=\"transform\" type=\"translate\" from=\"0,0\" to=\"500,0\" dur=\"8s\" repeatCount=\"indefinite\" />",
			"    </g>",
			"    <g>",
			"      <line x1=\"200\" y1=\"0\" x2=\"200\" y2=\"20\" stroke=\"blue\" stroke-width=\"2\">",
			"        <animate attributeName=\"y1\" from=\"0\" to=\"300\" dur=\"2s\" repeatCount=\"indefinite\" />",
			"        <animate attributeName=\"y2\" from=\"20\" to=\"320\" dur=\"2s\" repeatCount=\"indefinite\" />",
			"      </line>",
			"    </g>",
			"    <g>",
			"      <circle cx=\"300\" cy=\"0\" r=\"3\" fill=\"#ccc\">",
			"        <animate attributeName=\"cy\" from=\"0\" to=\"300\" dur=\"5s\" repeatCount=\"indefinite\" values=\"0; 300; 0\"/>",
			"      </circle>",
			"      <circle cx=\"350\" cy=\"0\" r=\"3\" fill=\"#ccc\">",
			"        <animate attributeName=\"cy\" from=\"0\" to=\"300\" dur=\"6s\" repeatCount=\"indefinite\" values=\"0; 300; 0\"/>",
			"      </circle>",
			"    </g>",
			"  </svg>",
			"  <h2>2. Peaceful Landscape Scene</h2>",
			"  <svg width=\"600\" height=\"300\">",
			"    <rect x=\"0\" y=\"0\" width=\"600\" height=\"200\" fill=\"lightblue\" />",
			"    <circle cx=\"100\" cy=\"80\" r=\"40\" fill=\"yellow\" />",
			"    <rect x=\"0\" y=\"200\" width=\"600\" height=\"100\" fill=\"green\" />",
			"    <g>",
			"      <rect x=\"100\" y=\"150\" width=\"20\" height=\"50\" fill=\"brown\" />",
			"      <polygon points=\"100,150 120,150 110,100\" fill=\"darkgreen\" >",
			"        <animateTransform attributeName=\"transform\" type=\"rotate\" from=\"-5 110 150\" to=\"5 110 150\" dur=\"2s\" repeatCount=\"indefinite\" />",
			"      </polygon>",
			"    </g>",
			"    <g>",
			"      <rect x=\"400\" y=\"150\" width=\"20\" height=\"50\" fill=\"brown\" />",
			"      <polygon points=\"400,150 420,150 410,100\" fill=\"darkgreen\">",
			"        <animateTransform attributeName=\"transform\" type=\"rotate\" from=\"-5 410 150\" to=\"5 410 150\" dur=\"2s\" repeatCount=\"indefinite\" />",
			"      </polygon>",
			"    </g>",
			"  </svg>",
			"  <h2>3. Car Moving Along a Curved Path</h2>",
			"  <svg width=\"600\" height=\"300\">",
			"    <path id=\"curvePath\" d=\"M50,250 C150,50 450,50 550,250\" stroke=\"gray\" stroke-width=\"2\" fill=\"none\" />",
			"    <g>",
			"      <rect x=\"-20\" y=\"-10\" width=\"40\" height=\"20\" fill=\"red\" />",
			"      <circle cx=\"-10\" cy=\"10\" r=\"5\" fill=\"black\" />",
			"      <circle cx=\"10\" cy=\"10\" r=\"5\" fill=\"black\" />",
			"      <animateMotion dur=\"6s\" repeatCount=\"indefinite\" rotate=\"auto\">",
			"        <mpath xlink:href=\"#curvePath\" />",
			"      </animateMotion>",
			"    </g>",
			"  </svg>",
			"</body>",
			"</html>"
		],
		"description": "HTML snippet containing SVG animations including weather interface, landscape, and car movement."
	},
	"Canvas Shapes": {
		"prefix": "canvas_shapes",
		"body": [
			"<!DOCTYPE html>",
			"<html lang=\"en\">",
			"<head>",
			"    <meta charset=\"UTF-8\">",
			"    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
			"    <title>Canvas Shapes</title>",
			"    <style>",
			"        body {",
			"            display: flex;",
			"            flex-direction: column;",
			"            align-items: center;",
			"            justify-content: center;",
			"            height: 100vh;",
			"            margin: 0;",
			"            background-color: #f0f0f0;",
			"            font-family: Arial, sans-serif;",
			"        }",
			"        .container {",
			"            display: flex;",
			"            flex-wrap: wrap;",
			"            justify-content: center;",
			"            gap: 20px;",
			"            margin-top: 20px;",
			"        }",
			"        .shape {",
			"            text-align: center;",
			"        }",
			"        canvas {",
			"            border: 1px solid #000;",
			"            background-color: #fff;",
			"            margin-top: 10px;",
			"        }",
			"        h3 {",
			"            margin: 0;",
			"            font-size: 18px;",
			"            color: #333;",
			"        }",
			"    </style>",
			"</head>",
			"<body>",
			"    <div class=\"container\">",
			"        <!-- Line -->",
			"        <div class=\"shape\">",
			"            <h3>Line</h3>",
			"            <canvas id=\"lineCanvas\" width=\"150\" height=\"150\"></canvas>",
			"        </div>",
			"        <!-- Rectangle -->",
			"        <div class=\"shape\">",
			"            <h3>Rectangle</h3>",
			"            <canvas id=\"rectCanvas\" width=\"150\" height=\"150\"></canvas>",
			"        </div>",
			"        <!-- Circle -->",
			"        <div class=\"shape\">",
			"            <h3>Circle</h3>",
			"            <canvas id=\"circleCanvas\" width=\"150\" height=\"150\"></canvas>",
			"        </div>",
			"        <!-- Arc -->",
			"        <div class=\"shape\">",
			"            <h3>Arc</h3>",
			"            <canvas id=\"arcCanvas\" width=\"150\" height=\"150\"></canvas>",
			"        </div>",
			"        <!-- Path -->",
			"        <div class=\"shape\">",
			"            <h3>Path</h3>",
			"            <canvas id=\"pathCanvas\" width=\"150\" height=\"150\"></canvas>",
			"        </div>",
			"        <!-- House -->",
			"        <div class=\"shape\">",
			"            <h3>House</h3>",
			"            <canvas id=\"houseCanvas\" width=\"150\" height=\"150\"></canvas>",
			"        </div>",
			"    </div>",
			"    <script>",
			"        // Line",
			"        const lineCanvas = document.getElementById('lineCanvas');",
			"        const lineCtx = lineCanvas.getContext('2d');",
			"        lineCtx.beginPath();",
			"        lineCtx.moveTo(10, 10);",
			"        lineCtx.lineTo(140, 140);",
			"        lineCtx.strokeStyle = 'blue';",
			"        lineCtx.lineWidth = 3;",
			"        lineCtx.stroke();",
			"        // Rectangle",
			"        const rectCanvas = document.getElementById('rectCanvas');",
			"        const rectCtx = rectCanvas.getContext('2d');",
			"        rectCtx.fillStyle = 'green';",
			"        rectCtx.fillRect(10, 10, 130, 130);",
			"        rectCtx.strokeStyle = 'black';",
			"        rectCtx.strokeRect(10, 10, 130, 130);",
			"        // Circle",
			"        const circleCanvas = document.getElementById('circleCanvas');",
			"        const circleCtx = circleCanvas.getContext('2d');",
			"        circleCtx.beginPath();",
			"        circleCtx.arc(75, 75, 60, 0, Math.PI * 2);",
			"        circleCtx.fillStyle = 'yellow';",
			"        circleCtx.fill();",
			"        circleCtx.strokeStyle = 'red';",
			"        circleCtx.stroke();",
			"        // Arc",
			"        const arcCanvas = document.getElementById('arcCanvas');",
			"        const arcCtx = arcCanvas.getContext('2d');",
			"        arcCtx.beginPath();",
			"        arcCtx.arc(75, 75, 60, 0, Math.PI, false);",
			"        arcCtx.strokeStyle = 'purple';",
			"        arcCtx.lineWidth = 5;",
			"        arcCtx.stroke();",
			"        // Path",
			"        const pathCanvas = document.getElementById('pathCanvas');",
			"        const pathCtx = pathCanvas.getContext('2d');",
			"        pathCtx.beginPath();",
			"        pathCtx.moveTo(10, 10);",
			"        pathCtx.lineTo(140, 10);",
			"        pathCtx.lineTo(75, 140);",
			"        pathCtx.closePath();",
			"        pathCtx.fillStyle = 'orange';",
			"        pathCtx.fill();",
			"        pathCtx.strokeStyle = 'black';",
			"        pathCtx.stroke();",
			"        // House",
			"        const houseCanvas = document.getElementById('houseCanvas');",
			"        const houseCtx = houseCanvas.getContext('2d');",
			"        houseCtx.fillStyle = 'brown';",
			"        houseCtx.fillRect(50, 80, 60, 60);",
			"        houseCtx.strokeStyle = 'black';",
			"        houseCtx.strokeRect(50, 80, 60, 60);",
			"        houseCtx.beginPath();",
			"        houseCtx.moveTo(40, 80);",
			"        houseCtx.lineTo(120, 80);",
			"        houseCtx.lineTo(80, 40);",
			"        houseCtx.closePath();",
			"        houseCtx.fillStyle = 'red';",
			"        houseCtx.fill();",
			"        houseCtx.strokeStyle = 'black';",
			"        houseCtx.stroke();",
			"        houseCtx.fillStyle = 'black';",
			"        houseCtx.fillRect(75, 110, 10, 30);",
			"    </script>",
			"</body>",
			"</html>"
		],
		"description": "HTML snippet containing various shapes drawn on a canvas using JavaScript."
	},
	"Advanced Canvas Shapes": {
		"prefix": "canvasShapes_Advanced",
		"body": [
			"<!DOCTYPE html>",
			"<html lang=\"en\">",
			"<head>",
			"    <meta charset=\"UTF-8\">",
			"    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
			"    <title>Advanced Canvas Shapes</title>",
			"    <style>",
			"        body {",
			"            display: flex;",
			"            flex-direction: column;",
			"            align-items: center;",
			"            justify-content: center;",
			"            height: 100vh;",
			"            margin: 0;",
			"            background-color: #f0f0f0;",
			"            font-family: Arial, sans-serif;",
			"        }",
			"        .container {",
			"            display: flex;",
			"            flex-wrap: wrap;",
			"            justify-content: center;",
			"            gap: 20px;",
			"            margin-top: 20px;",
			"        }",
			"        .shape {",
			"            text-align: center;",
			"        }",
			"        canvas {",
			"            border: 1px solid #000;",
			"            background-color: #fff;",
			"            margin-top: 10px;",
			"        }",
			"        h3 {",
			"            margin: 0;",
			"            font-size: 18px;",
			"            color: #333;",
			"        }",
			"    </style>",
			"</head>",
			"<body>",
			"",
			"    <div class=\"container\">",
			"        <!-- Pie Chart -->",
			"        <div class=\"shape\">",
			"            <h3>Pie Chart</h3>",
			"            <canvas id=\"pieChartCanvas\" width=\"200\" height=\"200\"></canvas>",
			"        </div>",
			"",
			"        <!-- Star -->",
			"        <div class=\"shape\">",
			"            <h3>Star</h3>",
			"            <canvas id=\"starCanvas\" width=\"200\" height=\"200\"></canvas>",
			"        </div>",
			"",
			"        <!-- Text -->",
			"        <div class=\"shape\">",
			"            <h3>Text</h3>",
			"            <canvas id=\"textCanvas\" width=\"200\" height=\"200\"></canvas>",
			"        </div>",
			"",
			"        <!-- Regular Polygon -->",
			"        <div class=\"shape\">",
			"            <h3>Regular Polygon</h3>",
			"            <canvas id=\"polygonCanvas\" width=\"200\" height=\"200\"></canvas>",
			"        </div>",
			"",
			"        <!-- Interlinked Circles -->",
			"        <div class=\"shape\">",
			"            <h3>Interlinked Circles</h3>",
			"            <canvas id=\"circlesCanvas\" width=\"200\" height=\"200\"></canvas>",
			"        </div>",
			"    </div>",
			"",
			"    <script>",
			"        // Pie Chart",
			"        const pieChartCanvas = document.getElementById('pieChartCanvas');",
			"        const pieCtx = pieChartCanvas.getContext('2d');",
			"        const data = [170, 60, 45];",
			"        const colors = ['red', 'green', 'blue'];",
			"        const total = data.reduce((sum, value) => sum + value, 0);",
			"        let startAngle = 0;",
			"",
			"        data.forEach((value, index) => {",
			"            const sliceAngle = (2 * Math.PI * value) / total;",
			"            pieCtx.beginPath();",
			"            pieCtx.moveTo(100, 100);",
			"            pieCtx.arc(100, 100, 80, startAngle, startAngle + sliceAngle);",
			"            pieCtx.closePath();",
			"            pieCtx.fillStyle = colors[index];",
			"            pieCtx.fill();",
			"            startAngle += sliceAngle;",
			"        });",
			"",
			"        // Star",
			"        const starCanvas = document.getElementById('starCanvas');",
			"        const starCtx = starCanvas.getContext('2d');",
			"        const points = [[0, 85], [75, 75], [100, 10], [125, 75],",
			"            [200, 85], [150, 125], [160, 190], [100, 150],",
			"            [40, 190], [50, 125], [0, 85]];",
			"",
			"        starCtx.beginPath();",
			"        points.forEach((point, index) => {",
			"            if (index === 0) {",
			"                starCtx.moveTo(point[0], point[1]);",
			"            } else {",
			"                starCtx.lineTo(point[0], point[1]);",
			"            }",
			"        });",
			"        starCtx.closePath();",
			"        starCtx.fillStyle = 'yellow';",
			"        starCtx.fill();",
			"        starCtx.strokeStyle = 'black';",
			"        starCtx.stroke();",
			"",
			"        // Text",
			"        const textCanvas = document.getElementById('textCanvas');",
			"        const textCtx = textCanvas.getContext('2d');",
			"        textCtx.font = '20px Arial';",
			"        textCtx.fillStyle = 'black';",
			"        textCtx.fillText('Data Visualization', 10, 30);",
			"        textCtx.strokeText('Data Visualization', 10, 60);",
			"        textCtx.fillText('nice      Beautiful', 10, 90);",
			"        textCtx.font = 'italic 20px Arial';",
			"        textCtx.fillText('pretty', 10, 120);",
			"",
			"        // Regular Polygon (Hexagon)",
			"        const polygonCanvas = document.getElementById('polygonCanvas');",
			"        const polygonCtx = polygonCanvas.getContext('2d');",
			"        const sides = 6;",
			"        const radius = 80;",
			"        const centerX = 100;",
			"        const centerY = 100;",
			"",
			"        polygonCtx.beginPath();",
			"        for (let i = 0; i < sides; i++) {",
			"            const angle = (i * 2 * Math.PI) / sides;",
			"            const x = centerX + radius * Math.cos(angle);",
			"            const y = centerY + radius * Math.sin(angle);",
			"            if (i === 0) {",
			"                polygonCtx.moveTo(x, y);",
			"            } else {",
			"                polygonCtx.lineTo(x, y);",
			"            }",
			"        }",
			"        polygonCtx.closePath();",
			"        polygonCtx.fillStyle = 'purple';",
			"        polygonCtx.fill();",
			"        polygonCtx.stroke();",
			"",
			"        // Interlinked Circles",
			"        const circlesCanvas = document.getElementById('circlesCanvas');",
			"        const circlesCtx = circlesCanvas.getContext('2d');",
			"        [[100, 70, 'blue'], [70, 130, 'red'], [130, 130, 'green']].forEach(([x, y, color]) => {",
			"            circlesCtx.beginPath();",
			"            circlesCtx.arc(x, y, 50, 0, Math.PI * 2);",
			"            circlesCtx.fillStyle = color;",
			"            circlesCtx.fill();",
			"            circlesCtx.stroke();",
			"        });",
			"",
			"    </script>",
			"",
			"</body>",
			"</html>"
		],
		"description": "Advanced Canvas Shapes with Pie Chart, Star, Text, Polygon, and Interlinked Circles."
	},
	"CanvasAnimations": {
		"prefix": "canvasAnimations",
		"body": [
			"<!DOCTYPE html>",
			"<html lang=\"en\">",
			"<head>",
			"    <meta charset=\"UTF-8\">",
			"    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
			"    <title>Canvas Animations</title>",
			"    <style>",
			"        body {",
			"            display: flex;",
			"            flex-wrap: wrap;",
			"            justify-content: center;",
			"            align-items: center;",
			"            margin: 0;",
			"            padding: 20px;",
			"            background-color: #f0f0f0;",
			"            font-family: Arial, sans-serif;",
			"        }",
			"        canvas {",
			"            border: 1px solid #000;",
			"            background-color: #fff;",
			"            margin: 10px;",
			"        }",
			"        h2 {",
			"            text-align: center;",
			"            margin: 10px 0;",
			"            font-size: 18px;",
			"            color: #333;",
			"        }",
			"        .animation-container {",
			"            text-align: center;",
			"            margin: 10px;",
			"        }",
			"    </style>",
			"</head>",
			"<body>",
			"    <div class=\"animation-container\">",
			"        <h2>Earth Rotating Around the Sun</h2>",
			"        <canvas id=\"earthSunCanvas\" width=\"200\" height=\"200\"></canvas>",
			"    </div>",
			"    <div class=\"animation-container\">",
			"        <h2>Bouncing Ball</h2>",
			"        <canvas id=\"bouncingBallCanvas\" width=\"200\" height=\"200\"></canvas>",
			"    </div>",
			"    <div class=\"animation-container\">",
			"        <h2>Rotating Fan</h2>",
			"        <canvas id=\"fanCanvas\" width=\"200\" height=\"200\"></canvas>",
			"    </div>",
			"    <div class=\"animation-container\">",
			"        <h2>Save and Restore States</h2>",
			"        <canvas id=\"saveRestoreCanvas\" width=\"200\" height=\"200\"></canvas>",
			"    </div>",
			"    <div class=\"animation-container\">",
			"        <h2>Rising Bubbles</h2>",
			"        <canvas id=\"bubblesCanvas\" width=\"200\" height=\"200\"></canvas>",
			"    </div>",
			"    <script>",
			"        // Earth Rotating Around the Sun",
			"        const earthSunCanvas = document.getElementById('earthSunCanvas');",
			"        const earthSunCtx = earthSunCanvas.getContext('2d');",
			"        let earthAngle = 0;",
			"        function drawEarthSun() {",
			"            earthSunCtx.clearRect(0, 0, 200, 200);",
			"            earthSunCtx.beginPath();",
			"            earthSunCtx.arc(100, 100, 30, 0, Math.PI * 2);",
			"            earthSunCtx.fillStyle = 'yellow';",
			"            earthSunCtx.fill();",
			"            const earthX = 100 + 80 * Math.cos(earthAngle);",
			"            const earthY = 100 + 80 * Math.sin(earthAngle);",
			"            earthSunCtx.beginPath();",
			"            earthSunCtx.arc(earthX, earthY, 10, 0, Math.PI * 2);",
			"            earthSunCtx.fillStyle = 'blue';",
			"            earthSunCtx.fill();",
			"            earthAngle += 0.02;",
			"            requestAnimationFrame(drawEarthSun);",
			"        }",
			"        drawEarthSun();",
			"",
			"        // Bouncing Ball",
			"        const bouncingBallCanvas = document.getElementById('bouncingBallCanvas');",
			"        const bouncingBallCtx = bouncingBallCanvas.getContext('2d');",
			"        let ballX = 100, ballY = 50, ballDX = 2, ballDY = 2, ballRadius = 10;",
			"        function drawBouncingBall() {",
			"            bouncingBallCtx.clearRect(0, 0, 200, 200);",
			"            bouncingBallCtx.beginPath();",
			"            bouncingBallCtx.arc(ballX, ballY, ballRadius, 0, Math.PI * 2);",
			"            bouncingBallCtx.fillStyle = 'red';",
			"            bouncingBallCtx.fill();",
			"            ballX += ballDX;",
			"            ballY += ballDY;",
			"            if (ballX + ballRadius > 200 || ballX - ballRadius < 0) ballDX = -ballDX;",
			"            if (ballY + ballRadius > 200 || ballY - ballRadius < 0) ballDY = -ballDY;",
			"            requestAnimationFrame(drawBouncingBall);",
			"        }",
			"        drawBouncingBall();",
			"",
			"        // Rotating Fan",
			"        const fanCanvas = document.getElementById('fanCanvas');",
			"        const fanCtx = fanCanvas.getContext('2d');",
			"        let fanAngle = 0;",
			"        function drawFan() {",
			"            fanCtx.clearRect(0, 0, 200, 200);",
			"            fanCtx.save();",
			"            fanCtx.translate(100, 100);",
			"            fanCtx.rotate(fanAngle);",
			"            fanCtx.fillStyle = 'gray';",
			"            for (let i = 0; i < 4; i++) {",
			"                fanCtx.fillRect(-5, -80, 10, 80);",
			"                fanCtx.rotate(Math.PI / 2);",
			"            }",
			"            fanCtx.restore();",
			"            fanAngle += 0.05;",
			"            requestAnimationFrame(drawFan);",
			"        }",
			"        drawFan();",
			"",
			"        // Save and Restore States",
			"        const saveRestoreCanvas = document.getElementById('saveRestoreCanvas');",
			"        const saveRestoreCtx = saveRestoreCanvas.getContext('2d');",
			"        function drawSaveRestore() {",
			"            saveRestoreCtx.clearRect(0, 0, 200, 200);",
			"            saveRestoreCtx.save();",
			"            saveRestoreCtx.fillStyle = 'blue';",
			"            saveRestoreCtx.fillRect(10, 10, 80, 80);",
			"            saveRestoreCtx.restore();",
			"            saveRestoreCtx.fillRect(110, 10, 80, 80);",
			"        }",
			"        drawSaveRestore();",
			"",
			"        // Rising Bubbles",
			"        const bubblesCanvas = document.getElementById('bubblesCanvas');",
			"        const bubblesCtx = bubblesCanvas.getContext('2d');",
			"        const bubbles = [];",
			"        function createBubble() {",
			"            bubbles.push({",
			"                x: Math.random() * 200,",
			"                y: 200,",
			"                radius: Math.random() * 10 + 5,",
			"                speed: Math.random() * 2 + 1",
			"            });",
			"        }",
			"        function drawBubbles() {",
			"            bubblesCtx.clearRect(0, 0, 200, 200);",
			"            bubbles.forEach((bubble, index) => {",
			"                bubblesCtx.beginPath();",
			"                bubblesCtx.arc(bubble.x, bubble.y, bubble.radius, 0, Math.PI * 2);",
			"                bubblesCtx.strokeStyle = 'blue';",
			"                bubblesCtx.stroke();",
			"                bubble.y -= bubble.speed;",
			"                if (bubble.y + bubble.radius < 0) {",
			"                    bubbles.splice(index, 1);",
			"                }",
			"            });",
			"            if (Math.random() < 0.1) {",
			"                createBubble();",
			"            }",
			"            requestAnimationFrame(drawBubbles);",
			"        }",
			"        drawBubbles();",
			"    </script>",
			"</body>",
			"</html>"
		],
		"description": "Full HTML5 Canvas Animations"
	},
	"chart": {
		"prefix": "canvasjs_chart",
		"body": [
			"<!doctype html>",
			"<html lang=\"en\">",
			"<head>",
			"    <meta charset=\"UTF-8\">",
			"    <meta name=\"viewport\"",
			"          content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">",
			"    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">",
			"    <title>Document</title>",
			"    <style>",
			"        #myContainer {",
			"            height: 400px;",
			"            width: 80%;",
			"            background-color: grey;",
			"        }",
			"    </style>",
			"    <script src=\"https://canvasjs.com/assets/script/canvasjs.min.js\"></script>",
			"    <script>",
			"        const dataObj = [",
			"            {label: 2, y: 4},",
			"            {label: 6, y: 8}",
			"        ]",
			"        window.onload = function () {",
			"            let chart = new CanvasJS.Chart(\"myContainer\", {",
			"                animationEnabled: true,",
			"                animationDuration: 1000,",
			"                zoomEnabled: true,",
			"                theme: \"light1\",",
			"                title: {",
			"                    text: \"Chart\",",
			"                    backgroundColor: \"lightgrey\",",
			"                    cornerRadius: 5",
			"                },",
			"                data: [",
			"                    {",
			"                        type: \"column\",",
			"                        showInLegend: true,",
			"                        dataPoints: dataObj",
			"",
			"                    },",
			"                    {",
			"                        type: \"line\",",
			"                        showInLegend: true,",
			"                        dataPoints: dataObj",
			"",
			"                    }",
			"                ],",
			"                tooltip: {",
			"                    content: \"Fruit {label} <br> Sold : {y}\"",
			"                }",
			"            });",
			"            chart.render()",
			"        }",
			"    </script>",
			"</head>",
			"<body>",
			"<div id=\"myContainer\"></div>",
			"",
			"</body>",
			"</html>"
		],
		"description": "chart"
	},
	"Example": {
		"prefix": "example-svg",
		"body": [
			"<!doctype html>",
			"<html lang=\"en\">",
			"<head>",
			"    <meta charset=\"UTF-8\">",
			"    <meta name=\"viewport\"",
			"          content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">",
			"    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">",
			"    <title>Document</title>",
			"</head>",
			"<body>",
			"",
			"<svg height=\"200\" width=\"200\">",
			"    <defs>",
			"        <filter x=\"0\" y=\"0\" id=\"f1\">",
			"            <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"15\" />",
			"        </filter>",
			"    </defs>",
			"",
			"    <rect height=\"90\" width=\"90\" fill=\"red\" filter=\"url(#f1)\" ></rect>",
			"</svg>",
			"",
			"<svg height=\"200\" width=\"200\" >",
			"    <defs>",
			"        <linearGradient id=\"l1\" x1=\"0%\" x2=\"100%\" y1=\"0%\" y2=\"0%\">",
			"            <stop offset=\"0%\" stop-color=\"red\"></stop>",
			"            <stop offset=\"100%\" stop-color=\"blue\"></stop>",
			"        </linearGradient>",
			"    </defs>",
			"",
			"    <ellipse rx=\"100\" ry=\"70\" cx=\"100\" cy=\"100\" fill=\"url(#l1)\"></ellipse>",
			"</svg>",
			"",
			"<svg height=\"100\" width=\"100\">",
			"    <a href=\"www.google.com\">",
			"        <text x=\"5\" y=\"15\" fill=\"red\">Google Link</text>",
			"    </a>",
			"</svg>",
			"",
			"",
			"<svg height=\"100\" width=\"100\" >",
			"    <defs>",
			"        <pattern id=\"p1\" x=\"0\" y=\"0\" width=\"20\" height=\"20\" patternUnits= \"userSpaceOnUse\">",
			"            <circle r=\"10\" cx=\"10\" cy=\"10\" fill=\"red\"></circle>",
			"        </pattern>",
			"    </defs>",
			"",
			"    <rect width=\"200\" height=\"100\" x=\"0\" y=\"0\" stroke=\"blank\" fill=\"url(#p1)\"></rect>",
			"</svg>",
			"",
			"<svg height=\"100\" width=\"100\">",
			"    <rect height=\"20\" width=\"20\" fill=\"red\"></rect>",
			"    <rect height=\"20\" width=\"20\" fill=\"blue\" transform=\"translate(15,0)\" ></rect>",
			"    <rect x=\"45\" y=\"45\" height=\"20\" width=\"20\" fill=\"blue\" transform=\"rotate(45)\"></rect>",
			"</svg>",
			"",
			"",
			"<svg height=\"100\" width=\"100\">",
			"    <circle r=\"25\" cx=\"50\" cy=\"50\" fill=\"lightblue\">",
			"        <set attributeName=\"fill\" to=\"red\" begin=\"3s\"></set>",
			"    </circle>",
			"</svg>",
			"",
			"<svg height=\"100\" width=\"100\">",
			"    <circle r=\"25\" cx=\"50\" cy=\"50\" fill=\"lightblue\">",
			"        <animate attributeName=\"cx\" begin=\"0s\" from=\"50\" to=\"100\" dur=\"1s\" repeatCount=\"indefinite\"></animate>",
			"    </circle>",
			"</svg>",
			"",
			"",
			"",
			"",
			"",
			"</body>",
			"</html>"
		],
		"description": "Example"
	},
	"Dashboard HTML": {
		"prefix": "txt-csv-xml-json_to_table-chart",
		"body": [
			"<!DOCTYPE html>",
			"<html lang=\"en-IN\" dir=\"ltr\">",
			"<head>",
			"  <meta charset=\"UTF-8\" />",
			"  <title>Data Visualization Dashboard</title>",
			"  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />",
			"  <script src=\"https://code.jquery.com/jquery-3.5.1.min.js\"></script>",
			"  <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>",
			"  <style>",
			"    body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f0f2f5; }",
			"    h2 { margin-bottom: 10px; }",
			"    .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 20px; }",
			"    .card { background: #fff; padding: 15px; border-radius: 10px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }",
			"    table { width: 100%; border-collapse: collapse; }",
			"    th, td { padding: 8px; text-align: left; border: 1px solid #ddd; }",
			"    th { background: cornflowerblue; color: white; }",
			"    canvas { width: 100% !important; height: 300px !important; }",
			"  </style>",
			"</head>",
			"<body>",
			"",
			"<h1>Data Visualization Dashboard</h1>",
			"",
			"<div class=\"grid\">",
			"  <div class=\"card\"> <h2>a. TXT to Table</h2> <table id=\"txtTable\"></table> </div>",
			"  <div class=\"card\"> <h2>b. TXT to Bar Chart</h2> <canvas id=\"txtBarChart\"></canvas> </div>",
			"  <div class=\"card\"> <h2>c. CSV to Table</h2> <table id=\"csvTable\"></table> </div>",
			"  <div class=\"card\"> <h2>d. CSV to Pie Chart</h2> <canvas id=\"csvPieChart\"></canvas> </div>",
			"  <div class=\"card\"> <h2>e. XML to Table</h2> <table id=\"xmlTable\"></table> </div>",
			"  <div class=\"card\"> <h2>f. XML to Bar Chart</h2> <canvas id=\"xmlBarChart\"></canvas> </div>",
			"  <div class=\"card\"> <h2>g. JSON to Table</h2> <table id=\"jsonTable\"></table> </div>",
			"  <div class=\"card\"> <h2>h. JSON to Donut Chart</h2> <canvas id=\"jsonDonutChart\"></canvas> </div>",
			"</div>",
			"",
			"<script>",
			"  $(document).ready(function() {",
			"    $.get('data/data.txt', function(data) {",
			"      const lines = data.trim().split('\\n');",
			"      const headers = lines[0].trim().split(' ');",
			"      const rows = lines.slice(1).map(l => l.trim().split(' '));",
			"      let txtTable = '<tr>' + headers.map(h => `<th>${h}</th>`).join('') + '</tr>';",
			"      rows.forEach(row => {",
			"        txtTable += '<tr>' + row.map(cell => `<td>${cell}</td>`).join('') + '</tr>';",
			"      });",
			"      $('#txtTable').html(txtTable);",
			"      const labels = rows.map(r => r[0]);",
			"      const values = rows.map(r => parseFloat(r[1]));",
			"      new Chart($('#txtBarChart'), {",
			"        type: 'bar',",
			"        data: { labels: labels, datasets: [{ label: 'Values', data: values, backgroundColor: 'cornflowerblue' }] }",
			"      });",
			"    });",
			"",
			"    $.get('data/data.csv', function(data) {",
			"      const lines = data.trim().split('\\n');",
			"      const headers = lines[0].split(',');",
			"      const rows = lines.slice(1).map(l => l.split(','));",
			"      let csvTable = '<tr>' + headers.map(h => `<th>${h}</th>`).join('') + '</tr>';",
			"      rows.forEach(row => {",
			"        csvTable += '<tr>' + row.map(cell => `<td>${cell}</td>`).join('') + '</tr>';",
			"      });",
			"      $('#csvTable').html(csvTable);",
			"      const labels = rows.map(r => r[0]);",
			"      const values = rows.map(r => parseFloat(r[1]));",
			"      new Chart($('#csvPieChart'), {",
			"        type: 'pie',",
			"        data: { labels: labels, datasets: [{ label: 'Quantity', data: values, backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#2ecc71', '#9b59b6'] }] }",
			"      });",
			"    });",
			"",
			"    $.get('data/data.xml', function(xml) {",
			"      const records = $(xml).find('record');",
			"      let xmlTable = '<tr><th>Name</th><th>Value</th></tr>';",
			"      let labels = [], values = [];",
			"      records.each(function() {",
			"        const name = $(this).find('name').text();",
			"        const value = $(this).find('value').text();",
			"        labels.push(name); values.push(parseFloat(value));",
			"        xmlTable += `<tr><td>${name}</td><td>${value}</td></tr>`;",
			"      });",
			"      $('#xmlTable').html(xmlTable);",
			"      new Chart($('#xmlBarChart'), {",
			"        type: 'bar',",
			"        data: { labels: labels, datasets: [{ label: 'Value', data: values, backgroundColor: 'salmon' }] }",
			"      });",
			"    });",
			"",
			"    $.getJSON('data/data.json', function(data) {",
			"      let jsonTable = '<tr><th>Name</th><th>Value</th></tr>';",
			"      let labels = [], values = [];",
			"      data.forEach(row => {",
			"        labels.push(row.Name);",
			"        values.push(row.Value);",
			"        jsonTable += `<tr><td>${row.Name}</td><td>${row.Value}</td></tr>`;",
			"      });",
			"      $('#jsonTable').html(jsonTable);",
			"      new Chart($('#jsonDonutChart'), {",
			"        type: 'doughnut',",
			"        data: { labels: labels, datasets: [{ label: 'Value', data: values, backgroundColor: ['#3498db', '#e67e22', '#1abc9c', '#9b59b6', '#e74c3c'] }] }",
			"      });",
			"    });",
			"  });",
			"</script>",
			"</body>",
			"</html>"
		],
		"description": "HTML dashboard with data tables and charts from TXT, CSV, XML, and JSON sources"
	},
	"D3.js Dashboard": {
		"prefix": "d3_chart",
		"body": [
			"<!DOCTYPE html>",
			"<html lang=\"en\">",
			"<head>",
			"  <meta charset=\"UTF-8\">",
			"  <title>D3.js Charts</title>",
			"  <script src=\"https://d3js.org/d3.v6.min.js\"></script>",
			"  <style>",
			"    body {",
			"      font-family: Arial, sans-serif;",
			"      margin: 20px;",
			"      background: #f4f4f4;",
			"    }",
			"    .grid {",
			"      display: grid;",
			"      grid-template-columns: repeat(2, 1fr);",
			"      gap: 20px;",
			"    }",
			"    .chart {",
			"      background: white;",
			"      padding: 15px;",
			"      border-radius: 10px;",
			"      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);",
			"    }",
			"    svg {",
			"      width: 100%;",
			"      height: 300px;",
			"    }",
			"    .legend {",
			"      font-size: 14px;",
			"      display: flex;",
			"      gap: 10px;",
			"    }",
			"    .legend div {",
			"      display: flex;",
			"      align-items: center;",
			"    }",
			"    .legend-color {",
			"      width: 20px;",
			"      height: 20px;",
			"    }",
			"  </style>",
			"</head>",
			"<body>",
			"",
			"<h1>D3.js Charts</h1>",
			"",
			"<div class=\"grid\">",
			"  <!-- Bar Chart -->",
			"  <div class=\"chart\" id=\"barChart\"></div>",
			"",
			"  <!-- Line Chart -->",
			"  <div class=\"chart\" id=\"lineChart\"></div>",
			"",
			"  <!-- Pie Chart -->",
			"  <div class=\"chart\" id=\"pieChart\"></div>",
			"",
			"  <!-- Column Chart -->",
			"  <div class=\"chart\" id=\"columnChart\"></div>",
			"</div>",
			"",
			"<script>",
			"  const barData = [25, 30, 45, 60, 20, 90, 55];",
			"  const barLabels = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];",
			"",
			"  const lineData = [5, 10, 15, 20, 25, 30, 35];",
			"  const lineLabels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'];",
			"",
			"  const pieData = [10, 20, 30, 40];",
			"  const pieLabels = ['Red', 'Blue', 'Green', 'Yellow'];",
			"",
			"  const columnData = [40, 50, 70, 90, 120];",
			"  const columnLabels = ['W', 'X', 'Y', 'Z', 'P'];",
			"",
			"  const barWidth = 50;",
			"  const barHeight = 200;",
			"  const barMargin = 10;",
			"",
			"  const barSvg = d3.select(\"#barChart\").append(\"svg\")",
			"    .attr(\"width\", barWidth * barData.length + barMargin * (barData.length + 1))",
			"    .attr(\"height\", barHeight);",
			"",
			"  const barScale = d3.scaleLinear()",
			"    .domain([0, d3.max(barData)])",
			"    .range([0, barHeight]);",
			"",
			"  barSvg.selectAll(\"rect\")",
			"    .data(barData)",
			"    .enter()",
			"    .append(\"rect\")",
			"    .attr(\"x\", (d, i) => i * (barWidth + barMargin))",
			"    .attr(\"y\", d => barHeight - barScale(d))",
			"    .attr(\"width\", barWidth)",
			"    .attr(\"height\", d => barScale(d))",
			"    .attr(\"fill\", \"cornflowerblue\");",
			"",
			"  barSvg.append(\"g\")",
			"    .attr(\"transform\", `translate(0, ${barHeight})`)",
			"    .call(d3.axisBottom(d3.scaleBand().domain(barLabels).range([0, barWidth * barData.length + barMargin * (barData.length + 1)])));",
			"",
			"  barSvg.append(\"g\")",
			"    .call(d3.axisLeft(barScale));",
			"",
			"  const lineSvg = d3.select(\"#lineChart\").append(\"svg\")",
			"    .attr(\"width\", 400)",
			"    .attr(\"height\", 300);",
			"",
			"  const line = d3.line()",
			"    .x((d, i) => i * 50 + 20)",
			"    .y(d => 300 - d * 7);",
			"",
			"  lineSvg.append(\"path\")",
			"    .data([lineData])",
			"    .attr(\"d\", line)",
			"    .attr(\"stroke\", \"steelblue\")",
			"    .attr(\"fill\", \"none\")",
			"    .attr(\"stroke-width\", 2);",
			"",
			"  lineSvg.append(\"g\")",
			"    .attr(\"transform\", \"translate(0, 300)\")",
			"    .call(d3.axisBottom(d3.scaleBand().domain(lineLabels).range([0, 400])));",
			"",
			"  lineSvg.append(\"g\")",
			"    .call(d3.axisLeft(d3.scaleLinear().domain([0, d3.max(lineData)]).range([300, 0])));",
			"",
			"  const pieSvg = d3.select(\"#pieChart\").append(\"svg\")",
			"    .attr(\"width\", 300)",
			"    .attr(\"height\", 300)",
			"    .append(\"g\")",
			"    .attr(\"transform\", \"translate(150,150)\");",
			"",
			"  const pie = d3.pie();",
			"  const arc = d3.arc().innerRadius(0).outerRadius(100);",
			"",
			"  pieSvg.selectAll(\"path\")",
			"    .data(pie(pieData))",
			"    .enter()",
			"    .append(\"path\")",
			"    .attr(\"d\", arc)",
			"    .attr(\"fill\", (d, i) => d3.schemeCategory10[i]);",
			"",
			"  const pieLegend = d3.select(\"#pieChart\").append(\"div\")",
			"    .attr(\"class\", \"legend\");",
			"",
			"  pieLabels.forEach((label, i) => {",
			"    pieLegend.append(\"div\").append(\"span\")",
			"      .attr(\"class\", \"legend-color\")",
			"      .style(\"background-color\", d3.schemeCategory10[i]);",
			"    pieLegend.append(\"div\").append(\"span\")",
			"      .text(label);",
			"  });",
			"",
			"  const columnWidth = 50;",
			"  const columnHeight = 200;",
			"",
			"  const columnSvg = d3.select(\"#columnChart\").append(\"svg\")",
			"    .attr(\"width\", columnWidth * columnData.length + barMargin * (columnData.length + 1))",
			"    .attr(\"height\", columnHeight);",
			"",
			"  const columnScale = d3.scaleLinear()",
			"    .domain([0, d3.max(columnData)])",
			"    .range([0, columnHeight]);",
			"",
			"  columnSvg.selectAll(\"rect\")",
			"    .data(columnData)",
			"    .enter()",
			"    .append(\"rect\")",
			"    .attr(\"x\", (d, i) => i * (columnWidth + barMargin))",
			"    .attr(\"y\", d => columnHeight - columnScale(d))",
			"    .attr(\"width\", columnWidth)",
			"    .attr(\"height\", d => columnScale(d))",
			"    .attr(\"fill\", \"tomato\");",
			"",
			"  columnSvg.append(\"g\")",
			"    .attr(\"transform\", `translate(0, ${columnHeight})`)",
			"    .call(d3.axisBottom(d3.scaleBand().domain(columnLabels).range([0, columnWidth * columnData.length + barMargin * (columnData.length + 1)])));",
			"",
			"  columnSvg.append(\"g\")",
			"    .call(d3.axisLeft(columnScale));",
			"</script>",
			"",
			"</body>",
			"</html>"
		],
		"description": "D3.js HTML dashboard with bar, line, pie, and column charts"
	},
	"Charts and Map Demo": {
		"prefix": "google_chart_api_json-to-googlemap",
		"body": [
			"<!DOCTYPE html>",
			"<html lang=\"en\">",
			"<head>",
			"  <meta charset=\"UTF-8\">",
			"  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">",
			"  <title>Charts & Map Demo</title>",
			"",
			"  <!-- Google Charts -->",
			"  <script src=\"https://www.gstatic.com/charts/loader.js\"></script>",
			"",
			"  <!-- Leaflet CSS & JS -->",
			"  <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet/dist/leaflet.css\" />",
			"  <script src=\"https://unpkg.com/leaflet/dist/leaflet.js\"></script>",
			"",
			"  <style>",
			"    body {",
			"      font-family: Arial, sans-serif;",
			"      display: flex;",
			"      flex-wrap: wrap;",
			"      gap: 20px;",
			"      justify-content: center;",
			"      padding: 20px;",
			"    }",
			"    .chart-card, .map-card {",
			"      width: 300px;",
			"      height: 400px;",
			"      border: 1px solid #ccc;",
			"      border-radius: 8px;",
			"      padding: 10px;",
			"      text-align: center;",
			"    }",
			"    .chart-card h3, .map-card h3 {",
			"      margin-bottom: 10px;",
			"    }",
			"    #map {",
			"      width: 100%;",
			"      height: 300px;",
			"      border-radius: 8px;",
			"    }",
			"  </style>",
			"</head>",
			"<body>",
			"",
			"<!-- Bar Chart -->",
			"<div class=\"chart-card\">",
			"  <h3>Bar Chart</h3>",
			"  <div id=\"barChart\"></div>",
			"</div>",
			"",
			"<!-- Line Chart -->",
			"<div class=\"chart-card\">",
			"  <h3>Line Chart</h3>",
			"  <div id=\"lineChart\"></div>",
			"</div>",
			"",
			"<!-- Pie Chart -->",
			"<div class=\"chart-card\">",
			"  <h3>Pie Chart</h3>",
			"  <div id=\"pieChart\"></div>",
			"</div>",
			"",
			"<!-- Donut Chart -->",
			"<div class=\"chart-card\">",
			"  <h3>Donut Chart</h3>",
			"  <div id=\"donutChart\"></div>",
			"</div>",
			"",
			"<!-- Candle Chart -->",
			"<div class=\"chart-card\">",
			"  <h3>Candle Chart</h3>",
			"  <div id=\"candleChart\"></div>",
			"</div>",
			"",
			"<!-- Gantt Chart -->",
			"<div class=\"chart-card\">",
			"  <h3>Gantt Chart</h3>",
			"  <div id=\"ganttChart\"></div>",
			"</div>",
			"",
			"<!-- Leaflet Map -->",
			"<div class=\"map-card\">",
			"  <h3>Leaflet Map</h3>",
			"  <div id=\"map\"></div>",
			"</div>",
			"",
			"<script>",
			"  // Load charts",
			"  google.charts.load('current', {'packages':['corechart', 'gantt']});",
			"  google.charts.setOnLoadCallback(drawCharts);",
			"",
			"  function drawCharts() {",
			"    // Bar Chart",
			"    var barData = google.visualization.arrayToDataTable([",
			"      ['Country', 'Production'],",
			"      ['Italy', 55],",
			"      ['France', 49],",
			"      ['Spain', 44],",
			"      ['USA', 24],",
			"      ['Argentina', 15]",
			"    ]);",
			"    var barChart = new google.visualization.BarChart(document.getElementById('barChart'));",
			"    barChart.draw(barData, { title: 'Wine Production' });",
			"",
			"    // Line Chart",
			"    var lineData = google.visualization.arrayToDataTable([",
			"      ['Size', 'Price'],",
			"      [50,7], [60,8], [70,8], [80,9],",
			"      [90,9], [100,9], [110,10], [120,11],",
			"      [130,14], [140,14], [150,15]",
			"    ]);",
			"    var lineChart = new google.visualization.LineChart(document.getElementById('lineChart'));",
			"    lineChart.draw(lineData, { title: 'House Price vs Size' });",
			"",
			"    // Pie Chart",
			"    var pieData = barData;",
			"    var pieChart = new google.visualization.PieChart(document.getElementById('pieChart'));",
			"    pieChart.draw(pieData, { title: 'Wine Production' });",
			"",
			"    // Donut Chart",
			"    var donutChart = new google.visualization.PieChart(document.getElementById('donutChart'));",
			"    donutChart.draw(pieData, { title: 'Wine Production', pieHole: 0.4 });",
			"",
			"    // Candle Chart",
			"    var candleData = google.visualization.arrayToDataTable([",
			"      ['Day', 'Low', 'Open', 'Close', 'High'],",
			"      ['Mon', 100, 105, 110, 115],",
			"      ['Tue', 110, 115, 120, 125],",
			"      ['Wed', 120, 125, 130, 135],",
			"      ['Thu', 130, 135, 140, 145]",
			"    ]);",
			"    var candleChart = new google.visualization.CandlestickChart(document.getElementById('candleChart'));",
			"    candleChart.draw(candleData, { legend: 'none' });",
			"",
			"    // Gantt Chart",
			"    var data = new google.visualization.DataTable();",
			"    data.addColumn('string', 'TaskID');",
			"    data.addColumn('string', 'TaskName');",
			"    data.addColumn('string', 'Resource');",
			"    data.addColumn('date', 'Start');",
			"    data.addColumn('date', 'End');",
			"    data.addColumn('number', 'Duration');",
			"    data.addColumn('number', 'PercentComplete');",
			"    data.addColumn('string', 'Dependencies');",
			"",
			"    data.addRows([",
			"      ['1', 'Planning', 'Research', new Date(2025, 0, 1), new Date(2025, 0, 7), null, 100, null],",
			"      ['2', 'Design', 'UI', new Date(2025, 0, 8), new Date(2025, 0, 15), null, 80, '1'],",
			"      ['3', 'Development', 'Dev', new Date(2025, 0, 16), new Date(2025, 1, 10), null, 50, '2'],",
			"      ['4', 'Testing', 'QA', new Date(2025, 1, 11), new Date(2025, 1, 20), null, 0, '3']",
			"    ]);",
			"",
			"    var ganttChart = new google.visualization.Gantt(document.getElementById('ganttChart'));",
			"    ganttChart.draw(data, {",
			"      height: 300,",
			"      gantt: { trackHeight: 30 }",
			"    });",
			"  }",
			"",
			"  // Leaflet Map",
			"  const map = L.map('map').setView([21.1702, 72.8311], 5);",
			"",
			"  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {",
			"    attribution: '&copy; OpenStreetMap contributors'",
			"  }).addTo(map);",
			"",
			"  fetch('locations.json')",
			"    .then(response => response.json())",
			"    .then(data => {",
			"      data.forEach(location => {",
			"        L.marker([location.lat, location.lng])",
			"          .addTo(map)",
			"          .bindPopup(location.name);",
			"      });",
			"    })",
			"    .catch(error => console.error('Error loading JSON:', error));",
			"</script>",
			"",
			"</body>",
			"</html>"
		],
		"description": "Full HTML page with multiple Google Charts and a Leaflet map using JSON data"
	},
	"happiness-dashboard": {
		"prefix": "interconnected-dashboard_GCAPI",
		"body": [
			"<!DOCTYPE html>",
			"<html>",
			"<head>",
			"  <title>Happiness Dashboard</title>",
			"  <script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>",
			"  <style>",
			"    body {",
			"      font-family: Arial, sans-serif;",
			"      padding: 20px;",
			"    }",
			"    #continentSelect {",
			"      padding: 10px;",
			"      font-size: 16px;",
			"      margin-bottom: 20px;",
			"    }",
			"    .chart-row {",
			"      display: flex;",
			"      justify-content: space-between;",
			"      gap: 20px;",
			"      flex-wrap: wrap;",
			"    }",
			"    .chart-box {",
			"      flex: 1;",
			"      min-width: 300px;",
			"      height: 400px;",
			"      border: 1px solid #ddd;",
			"      border-radius: 10px;",
			"      padding: 10px;",
			"      box-shadow: 2px 2px 5px #aaa;",
			"    }",
			"  </style>",
			"</head>",
			"<body>",
			"",
			"<h2>🌍 World Happiness Dashboard</h2>",
			"",
			"<select id=\"continentSelect\" onchange=\"drawBarChart()\">",
			"  <option value=\"Asia\">Asia</option>",
			"  <option value=\"Europe\">Europe</option>",
			"</select>",
			"",
			"<div class=\"chart-row\">",
			"  <div id=\"barChart\" class=\"chart-box\"></div>",
			"  <div id=\"pieChart\" class=\"chart-box\"></div>",
			"  <div id=\"lineChart\" class=\"chart-box\"></div>",
			"</div>",
			"",
			"<script>",
			"  google.charts.load('current', {'packages':['corechart']});",
			"  google.charts.setOnLoadCallback(initDashboard);",
			"",
			"  const jsonData = [",
			"    { \"Country\": \"India\", \"Continent\": \"Asia\", \"Score\": 4.5, \"Economy\": 1.2, \"Health\": 0.7, \"Freedom\": 0.5 },",
			"    { \"Country\": \"Japan\", \"Continent\": \"Asia\", \"Score\": 5.8, \"Economy\": 1.4, \"Health\": 0.9, \"Freedom\": 0.6 },",
			"    { \"Country\": \"Germany\", \"Continent\": \"Europe\", \"Score\": 6.9, \"Economy\": 1.6, \"Health\": 1.0, \"Freedom\": 0.7 },",
			"    { \"Country\": \"France\", \"Continent\": \"Europe\", \"Score\": 6.4, \"Economy\": 1.5, \"Health\": 0.9, \"Freedom\": 0.6 }",
			"  ];",
			"",
			"  const trendData = {",
			"    \"India\": [ [2019, 4.1], [2020, 4.3], [2021, 4.4], [2022, 4.5] ],",
			"    \"Japan\": [ [2019, 5.5], [2020, 5.7], [2021, 5.8], [2022, 5.8] ],",
			"    \"Germany\": [ [2019, 6.7], [2020, 6.8], [2021, 6.9], [2022, 6.9] ],",
			"    \"France\": [ [2019, 6.2], [2020, 6.3], [2021, 6.4], [2022, 6.4] ]",
			"  };",
			"",
			"  function initDashboard() {",
			"    drawBarChart();",
			"  }",
			"",
			"  function drawBarChart() {",
			"    const continent = document.getElementById('continentSelect').value;",
			"    const filteredData = jsonData.filter(item => item.Continent === continent);",
			"",
			"    const dataArray = [['Country', 'Happiness Score']];",
			"    filteredData.forEach(item => {",
			"      dataArray.push([item.Country, item.Score]);",
			"    });",
			"",
			"    const data = google.visualization.arrayToDataTable(dataArray);",
			"    const options = {",
			"      title: `Top Countries by Happiness Score (${continent})`,",
			"      legend: { position: 'none' },",
			"      colors: ['#1E88E5']",
			"    };",
			"",
			"    const chart = new google.visualization.BarChart(document.getElementById('barChart'));",
			"    chart.draw(data, options);",
			"    google.visualization.events.addListener(chart, 'select', function () {",
			"      const selectedItem = chart.getSelection()[0];",
			"      if (selectedItem) {",
			"        const country = data.getValue(selectedItem.row, 0);",
			"        drawPieChart(country);",
			"        drawLineChart(country);",
			"      }",
			"    });",
			"",
			"    if (filteredData.length > 0) {",
			"      drawPieChart(filteredData[0].Country);",
			"      drawLineChart(filteredData[0].Country);",
			"    }",
			"  }",
			"",
			"  function drawPieChart(country) {",
			"    const countryData = jsonData.find(item => item.Country === country);",
			"    const data = google.visualization.arrayToDataTable([",
			"      ['Factor', 'Value'],",
			"      ['Economy', countryData.Economy],",
			"      ['Health', countryData.Health],",
			"      ['Freedom', countryData.Freedom]",
			"    ]);",
			"",
			"    const options = {",
			"      title: `Happiness Factors: ${country}`,",
			"      pieHole: 0.4,",
			"      colors: ['#43A047', '#FB8C00', '#F4511E']",
			"    };",
			"",
			"    const chart = new google.visualization.PieChart(document.getElementById('pieChart'));",
			"    chart.draw(data, options);",
			"  }",
			"",
			"  function drawLineChart(country) {",
			"    const trend = trendData[country];",
			"    const dataArray = [['Year', 'Happiness Score']];",
			"    trend.forEach(([year, score]) => dataArray.push([year.toString(), score]));",
			"",
			"    const data = google.visualization.arrayToDataTable(dataArray);",
			"",
			"    const options = {",
			"      title: `Happiness Score Trend: ${country}`,",
			"      curveType: 'function',",
			"      legend: { position: 'bottom' },",
			"      colors: ['#8E24AA']",
			"    };",
			"",
			"    const chart = new google.visualization.LineChart(document.getElementById('lineChart'));",
			"    chart.draw(data, options);",
			"  }",
			"</script>",
			"",
			"</body>",
			"</html>"
		],
		"description": "Interactive Google Charts dashboard showing happiness scores by continent with bar, pie, and line charts."
	}
};
  res.status(200).json(myData);
}
